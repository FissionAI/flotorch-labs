{
    "flotorch/nova-pro": [
        {
            "metadata": {
                "inputTokens": "338",
                "outputTokens": "47",
                "totalTokens": "385",
                "latencyMs": "1234"
            },
            "generated_answer": "for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n            return True\nreturn False",
            "expected_answer": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "325",
                "outputTokens": "30",
                "totalTokens": "355",
                "latencyMs": "1234"
            },
            "generated_answer": "import re\ngroups = re.findall(r'\\([^()]*\\)', paren_string.replace(' ', ''))\nreturn groups",
            "expected_answer": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
            "question": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "290",
                "outputTokens": "7",
                "totalTokens": "297",
                "latencyMs": "1029"
            },
            "generated_answer": "return number - int(number)",
            "expected_answer": "    return number % 1.0\n",
            "question": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "328",
                "outputTokens": "28",
                "totalTokens": "356",
                "latencyMs": "826"
            },
            "generated_answer": "balance = 0\n\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        return True\n\nreturn False",
            "expected_answer": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "326",
                "outputTokens": "62",
                "totalTokens": "388",
                "latencyMs": "1236"
            },
            "generated_answer": "if not numbers:\n    return 0.0\n\nmean_value = sum(numbers) / len(numbers)\nabsolute_deviations = [abs(num - mean_value) for num in numbers]\nmad = sum(absolute_deviations) / len(numbers)\nreturn mad",
            "expected_answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "question": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "305",
                "outputTokens": "35",
                "totalTokens": "340",
                "latencyMs": "917"
            },
            "generated_answer": "if not numbers:\n    return []\nresult = [numbers[0]]\nfor num in numbers[1:]:\n    result.extend([delimeter, num])\nreturn result",
            "expected_answer": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
            "question": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "321",
                "outputTokens": "135",
                "totalTokens": "456",
                "latencyMs": "2198"
            },
            "generated_answer": "import re\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    groups = re.findall(r'\\([^()]*\\)', paren_string)\n    nesting_levels = []\n    for group in groups:\n        level = 0\n        current_level = 0\n        for char in group:\n            if char == '(':\n                current_level += 1\n                if current_level > level:\n                    level = current_level\n            elif char == ')':\n                current_level -= 1\n        nesting_levels.append(level)\n    return nesting_levels",
            "expected_answer": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "309",
                "outputTokens": "26",
                "totalTokens": "335",
                "latencyMs": "768"
            },
            "generated_answer": "result = []\n\nfor s in strings:\n    if substring in s:\n        result.append(s)\n\nreturn result",
            "expected_answer": "    return [x for x in strings if substring in x]\n",
            "question": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "323",
                "outputTokens": "60",
                "totalTokens": "383",
                "latencyMs": "1336"
            },
            "generated_answer": "if not numbers:\n    return (0, 1)\nelse:\n    sum_nums = sum(numbers)\n    product_nums = 1\n    for num in numbers:\n        product_nums *= num\n    return (sum_nums, product_nums)",
            "expected_answer": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
            "question": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "309",
                "outputTokens": "43",
                "totalTokens": "352",
                "latencyMs": "1005"
            },
            "generated_answer": "result = []\ncurrent_max = float('-inf')\n\nfor num in numbers:\n    if num > current_max:\n        current_max = num\n    result.append(current_max)\n\nreturn result",
            "expected_answer": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
            "question": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "360",
                "outputTokens": "138",
                "totalTokens": "498",
                "latencyMs": "2168"
            },
            "generated_answer": "# Function to find the longest palindromic postfix\ndef longest_palindromic_postfix(s: str) -> str:\n    for i in range(len(s), 0, -1):\n        if s[:i] == s[:i][::-1]:\n            return s[:i]\n    return ''\n\n# Main function to make palindrome\nnon_palindrome_part = string[:-len(longest_palindromic_postfix(string))]\npalindromic_postfix = longest_palindromic_postfix(string)\nreturn string + non_palindrome_part[::-1]",
            "expected_answer": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
            "question": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "290",
                "outputTokens": "28",
                "totalTokens": "318",
                "latencyMs": "811"
            },
            "generated_answer": "result = ''.join('1' if x != y else '0' for x, y in zip(a, b))\nreturn result",
            "expected_answer": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
            "question": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "312",
                "outputTokens": "17",
                "totalTokens": "329",
                "latencyMs": "741"
            },
            "generated_answer": "if not strings:\n    return None\nreturn max(strings, key=len)",
            "expected_answer": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
            "question": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "279",
                "outputTokens": "16",
                "totalTokens": "295",
                "latencyMs": "572"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    while b:\n        a, b = b, a % b\n    return a\n",
            "question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "267",
                "outputTokens": "32",
                "totalTokens": "299",
                "latencyMs": "1906"
            },
            "generated_answer": "```python\nprefixes = [string[:i] for i in range(1, len(string) + 1)]\nreturn prefixes\n```",
            "expected_answer": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
            "question": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "276",
                "outputTokens": "25",
                "totalTokens": "301",
                "latencyMs": "1017"
            },
            "generated_answer": "```python\nreturn ' '.join([str(x) for x in range(n + 1)])\n```",
            "expected_answer": "    return ' '.join([str(x) for x in range(n + 1)])\n",
            "question": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "275",
                "outputTokens": "9",
                "totalTokens": "284",
                "latencyMs": "551"
            },
            "generated_answer": "return len(set(string.lower()))",
            "expected_answer": "    return len(set(string.lower()))\n",
            "question": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "380",
                "outputTokens": "57",
                "totalTokens": "437",
                "latencyMs": "1704"
            },
            "generated_answer": "beats = []\nfor note in music_string.split():\n    if note == 'o':\n        beats.append(4)\n    elif note == 'o|':\n        beats.append(2)\n    elif note == '.|':\n        beats.append(1)\nreturn beats",
            "expected_answer": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "300",
                "outputTokens": "58",
                "totalTokens": "358",
                "latencyMs": "1680"
            },
            "generated_answer": "count = 0\nstart = 0\nwhile True:\n    start = string.find(substring, start)\n    if start == -1:\n        break\n    count += 1\n    start += 1  # Move to the next character to allow overlapping\nreturn count",
            "expected_answer": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
            "question": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "319",
                "outputTokens": "125",
                "totalTokens": "444",
                "latencyMs": "2072"
            },
            "generated_answer": "num_dict = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n}\nnum_list = numbers.split()\nsorted_list = sorted(num_list, key=lambda x: num_dict[x])\nreturn ' '.join(sorted_list)",
            "expected_answer": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
            "question": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "377",
                "outputTokens": "91",
                "totalTokens": "468",
                "latencyMs": "2133"
            },
            "generated_answer": "numbers.sort()\nmin_diff = float('inf')\nclosest_pair = (numbers[0], numbers[1])\nfor i in range(len(numbers) - 1):\n    diff = numbers[i + 1] - numbers[i]\n    if diff < min_diff:\n        min_diff = diff\n        closest_pair = (numbers[i], numbers[i + 1])\nreturn closest_pair",
            "expected_answer": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
            "question": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "335",
                "outputTokens": "52",
                "totalTokens": "387",
                "latencyMs": "1599"
            },
            "generated_answer": "if not numbers:\n    return []\nmin_val = min(numbers)\nmax_val = max(numbers)\nrange_val = max_val - min_val\nreturn [(x - min_val) / range_val for x in numbers]",
            "expected_answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
            "question": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "304",
                "outputTokens": "17",
                "totalTokens": "321",
                "latencyMs": "661"
            },
            "generated_answer": "return [value for value in values if isinstance(value, int)]",
            "expected_answer": "    return [x for x in values if isinstance(x, int)]\n",
            "question": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "246",
                "outputTokens": "5",
                "totalTokens": "251",
                "latencyMs": "525"
            },
            "generated_answer": "return len(string)",
            "expected_answer": "    return len(string)\n",
            "question": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "256",
                "outputTokens": "27",
                "totalTokens": "283",
                "latencyMs": "1242"
            },
            "generated_answer": "for i in range(n-1, 0, -1):\n    if n % i == 0:\n        return i",
            "expected_answer": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
            "question": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "330",
                "outputTokens": "57",
                "totalTokens": "387",
                "latencyMs": "1192"
            },
            "generated_answer": "factors = []\ni = 2\nwhile i * i <= n:\n    if n % i:\n        i += 1\n    else:\n        n //= i\n        factors.append(i)\nif n > 1:\n    factors.append(n)\nreturn factors",
            "expected_answer": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
            "question": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "294",
                "outputTokens": "45",
                "totalTokens": "339",
                "latencyMs": "1026"
            },
            "generated_answer": "seen = set()\nresult = []\nfor num in numbers:\n    if num not in seen:\n        seen.add(num)\n        result.append(num)\n    else:\n        result.remove(num)\nreturn result",
            "expected_answer": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
            "question": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "253",
                "outputTokens": "56",
                "totalTokens": "309",
                "latencyMs": "1185"
            },
            "generated_answer": "result = []\nfor char in string:\n    if char.islower():\n        result.append(char.upper())\n    elif char.isupper():\n        result.append(char.lower())\n    else:\n        result.append(char)\nreturn ''.join(result)",
            "expected_answer": "    return string.swapcase()\n",
            "question": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "267",
                "outputTokens": "6",
                "totalTokens": "273",
                "latencyMs": "563"
            },
            "generated_answer": "return ''.join(strings)",
            "expected_answer": "    return ''.join(strings)\n",
            "question": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "304",
                "outputTokens": "27",
                "totalTokens": "331",
                "latencyMs": "841"
            },
            "generated_answer": "result = []\n\nfor s in strings:\n    if s.startswith(prefix):\n        result.append(s)\n\nreturn result",
            "expected_answer": "    return [x for x in strings if x.startswith(prefix)]\n",
            "question": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "324",
                "outputTokens": "14",
                "totalTokens": "338",
                "latencyMs": "1299"
            },
            "generated_answer": "return [num for num in l if num > 0]",
            "expected_answer": "    return [e for e in l if e > 0]\n",
            "question": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "316",
                "outputTokens": "86",
                "totalTokens": "402",
                "latencyMs": "1588"
            },
            "generated_answer": "if n <= 1:\n    return False\nif n <= 3:\n    return True\nif n % 2 == 0 or n % 3 == 0:\n    return False\ni = 5\nwhile i * i <= n:\n    if n % i == 0 or n % (i + 2) == 0:\n        return False\n    i += 6\nreturn True",
            "expected_answer": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
            "question": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "492",
                "outputTokens": "232",
                "totalTokens": "724",
                "latencyMs": "3755"
            },
            "generated_answer": "def find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \"\"\"\n    degree = len(xs) - 1\n    lower_bound = -max(abs(xs[degree]), abs(xs[0]))\n    upper_bound = max(abs(xs[degree]), abs(xs[0]))\n    step = 0.0001\n\n    for x in range(int(lower_bound * 10000), int(upper_bound * 10000) + 1, 1):\n        current_x = x / 10000\n        if abs(poly(xs, current_x)) < 0.0001:\n            return current_x",
            "expected_answer": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
            "question": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "360",
                "outputTokens": "117",
                "totalTokens": "477",
                "latencyMs": "1940"
            },
            "generated_answer": "third_index_elements = sorted([l[i] for i in range(len(l)) if i % 3 == 0])\nnew_list = []\nthird_index_elements_index = 0\n\nfor i in range(len(l)):\n    if i % 3 == 0:\n        new_list.append(third_index_elements[third_index_elements_index])\n        third_index_elements_index += 1\n    else:\n        new_list.append(l[i])\n\nreturn new_list",
            "expected_answer": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
            "question": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "280",
                "outputTokens": "9",
                "totalTokens": "289",
                "latencyMs": "543"
            },
            "generated_answer": "return sorted(list(set(l)))",
            "expected_answer": "    return sorted(list(set(l)))\n",
            "question": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "293",
                "outputTokens": "5",
                "totalTokens": "298",
                "latencyMs": "561"
            },
            "generated_answer": "return max(l)",
            "expected_answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
            "question": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "283",
                "outputTokens": "47",
                "totalTokens": "330",
                "latencyMs": "1065"
            },
            "generated_answer": "count = 0\nfor i in range(1, n):\n    if i % 11 == 0 or i % 13 == 0:\n        count += str(i).count('7')\nreturn count",
            "expected_answer": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
            "question": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "334",
                "outputTokens": "59",
                "totalTokens": "393",
                "latencyMs": "1240"
            },
            "generated_answer": "```python\nevens = sorted([l[i] for i in range(0, len(l), 2)])\nreturn [evens.pop(0) if i % 2 == 0 else l[i] for i in range(len(l))]",
            "expected_answer": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
            "question": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "370",
                "outputTokens": "75",
                "totalTokens": "445",
                "latencyMs": "1504"
            },
            "generated_answer": "groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\ngroups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)",
            "expected_answer": "    return encode_cyclic(encode_cyclic(s))\n",
            "question": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "299",
                "outputTokens": "66",
                "totalTokens": "365",
                "latencyMs": "1431"
            },
            "generated_answer": "from sympy import isprime\n\ndef prime_fib(n: int):\n    a, b = 0, 1\n    count = 0\n    while count < n:\n        a, b = b, a + b\n        if isprime(b):\n            count += 1\n    return b",
            "expected_answer": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
            "question": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "394",
                "outputTokens": "125",
                "totalTokens": "519",
                "latencyMs": "2051"
            },
            "generated_answer": "n = len(l)\nif n < 3:\n    return False\nl.sort()\nfor i in range(n - 2):\n    if i > 0 and l[i] == l[i - 1]:\n        continue\n    left, right = i + 1, n - 1\n    while left < right:\n        total = l[i] + l[left] + l[right]\n        if total == 0:\n            return True\n        elif total < 0:\n            left += 1\n        else:\n            right -= 1\nreturn False",
            "expected_answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "question": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "359",
                "outputTokens": "4",
                "totalTokens": "363",
                "latencyMs": "520"
            },
            "generated_answer": "return n * n",
            "expected_answer": "    return n**2\n",
            "question": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "324",
                "outputTokens": "16",
                "totalTokens": "340",
                "latencyMs": "740"
            },
            "generated_answer": "```python\nreturn [x + 1 for x in l]\n```",
            "expected_answer": "    return [(e + 1) for e in l]\n",
            "question": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "385",
                "outputTokens": "29",
                "totalTokens": "414",
                "latencyMs": "822"
            },
            "generated_answer": "seen = set()\nfor num in l:\n    if -num in seen:\n        return True\n    seen.add(num)\nreturn False",
            "expected_answer": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
            "question": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "303",
                "outputTokens": "41",
                "totalTokens": "344",
                "latencyMs": "990"
            },
            "generated_answer": "result = ''\nif base == 10:\n    return str(x)\nwhile x > 0:\n    result = str(x % base) + result\n    x //= base\nreturn result",
            "expected_answer": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
            "question": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "249",
                "outputTokens": "9",
                "totalTokens": "258",
                "latencyMs": "608"
            },
            "generated_answer": "return 0.5 * a * h",
            "expected_answer": "    return a * h / 2.0\n",
            "question": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "389",
                "outputTokens": "111",
                "totalTokens": "500",
                "latencyMs": "1813"
            },
            "generated_answer": "```python\nif n == 0: return 0\nif n == 1: return 0\nif n == 2: return 2\nif n == 3: return 0\n\nfib4_values = [0, 0, 2, 0]\nfor i in range(4, n + 1):\n    next_fib4 = sum(fib4_values[-4:])\n    fib4_values.append(next_fib4)\n\nreturn fib4_values[n]",
            "expected_answer": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
            "question": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "282",
                "outputTokens": "57",
                "totalTokens": "339",
                "latencyMs": "1251"
            },
            "generated_answer": "l.sort()\nlength = len(l)\nif length % 2 == 1:\n    return l[length // 2]\nelse:\n    return (l[length // 2 - 1] + l[length // 2]) / 2.0",
            "expected_answer": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
            "question": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "286",
                "outputTokens": "7",
                "totalTokens": "293",
                "latencyMs": "557"
            },
            "generated_answer": "return text == text[::-1]",
            "expected_answer": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
            "question": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "315",
                "outputTokens": "9",
                "totalTokens": "324",
                "latencyMs": "580"
            },
            "generated_answer": "return pow(2, n, p)",
            "expected_answer": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
            "question": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "303",
                "outputTokens": "38",
                "totalTokens": "341",
                "latencyMs": "997"
            },
            "generated_answer": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "expected_answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
            "question": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "335",
                "outputTokens": "26",
                "totalTokens": "361",
                "latencyMs": "743"
            },
            "generated_answer": "vowels = \"aeiouAEIOU\"\nreturn ''.join([char for char in text if char not in vowels])",
            "expected_answer": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
            "question": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "295",
                "outputTokens": "12",
                "totalTokens": "307",
                "latencyMs": "792"
            },
            "generated_answer": "return all(x < t for x in l)",
            "expected_answer": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
            "question": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "254",
                "outputTokens": "4",
                "totalTokens": "258",
                "latencyMs": "470"
            },
            "generated_answer": "return x + y",
            "expected_answer": "    return x + y\n",
            "question": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "370",
                "outputTokens": "16",
                "totalTokens": "386",
                "latencyMs": "769"
            },
            "generated_answer": "```python\nreturn sorted(s0) == sorted(s1)\n```",
            "expected_answer": "    return set(s0) == set(s1)\n",
            "question": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "259",
                "outputTokens": "63",
                "totalTokens": "322",
                "latencyMs": "1239"
            },
            "generated_answer": "if n <= 0:\n    return 0\nelif n == 1:\n    return 1\nelse:\n    a, b = 0, 1\n    for _ in range(2, n + 1):\n        a, b = b, a + b\n    return b",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
            "question": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "293",
                "outputTokens": "51",
                "totalTokens": "344",
                "latencyMs": "1113"
            },
            "generated_answer": "count = 0\n\nfor bracket in brackets:\n    if bracket == '<':\n        count += 1\n    elif bracket == '>':\n        count -= 1\n    if count < 0:\n        return False\n\nreturn count == 0",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "294",
                "outputTokens": "67",
                "totalTokens": "361",
                "latencyMs": "1159"
            },
            "generated_answer": "if not l:\n    return True\n\nincreasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\ndecreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n\nreturn increasing or decreasing",
            "expected_answer": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
            "question": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "332",
                "outputTokens": "16",
                "totalTokens": "348",
                "latencyMs": "624"
            },
            "generated_answer": "return sorted(list(set(l1) & set(l2)))",
            "expected_answer": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
            "question": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "275",
                "outputTokens": "79",
                "totalTokens": "354",
                "latencyMs": "1590"
            },
            "generated_answer": "def largest_prime_factor(n: int):\n    largest_factor = 2\n    i = 2\n    while i * i <= n:\n        if n % i:\n            i += 1\n        else:\n            n //= i\n            largest_factor = i\n    if n > 1:\n        largest_factor = n\n    return largest_factor",
            "expected_answer": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
            "question": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "315",
                "outputTokens": "12",
                "totalTokens": "327",
                "latencyMs": "602"
            },
            "generated_answer": "return n * (n + 1) // 2",
            "expected_answer": "    return sum(range(n + 1))\n",
            "question": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "291",
                "outputTokens": "50",
                "totalTokens": "341",
                "latencyMs": "1034"
            },
            "generated_answer": "balance = 0\nfor bracket in brackets:\n    if bracket == '(':\n        balance += 1\n    elif bracket == ')':\n        balance -= 1\n    if balance < 0:\n        return False\nreturn balance == 0",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "320",
                "outputTokens": "24",
                "totalTokens": "344",
                "latencyMs": "749"
            },
            "generated_answer": "return [coeff * i for i, coeff in enumerate(xs[1:], start=1)]",
            "expected_answer": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
            "question": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "365",
                "outputTokens": "84",
                "totalTokens": "449",
                "latencyMs": "1744"
            },
            "generated_answer": "```python\nif n == 0 or n == 1:\n    return 0\nelif n == 2:\n    return 1\nelse:\n    a, b, c = 0, 0, 1\n    for _ in range(3, n + 1):\n        a, b, c = b, c, a + b + c\n    return c\n```",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
            "question": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "334",
                "outputTokens": "47",
                "totalTokens": "381",
                "latencyMs": "1049"
            },
            "generated_answer": "vowels = set('aeiouAEIOU')\ncount = sum(1 for char in s if char in vowels)\nif s[-1].lower() == 'y':\n    count += 1\nreturn count",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
            "question": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "291",
                "outputTokens": "45",
                "totalTokens": "336",
                "latencyMs": "898"
            },
            "generated_answer": "x = str(x)\nshift = shift % len(x)\nif shift == 0 or shift == len(x):\n    return x\nelse:\n    return x[-shift:] + x[:-shift]",
            "expected_answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
            "question": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "324",
                "outputTokens": "17",
                "totalTokens": "341",
                "latencyMs": "1727"
            },
            "generated_answer": "sum(ord(c) for c in s if c.isupper())",
            "expected_answer": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
            "question": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "434",
                "outputTokens": "29",
                "totalTokens": "463",
                "latencyMs": "799"
            },
            "generated_answer": "apples = int(s.split()[0])\noranges = int(s.split()[2])\nreturn n - apples - oranges",
            "expected_answer": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
            "question": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "527",
                "outputTokens": "59",
                "totalTokens": "586",
                "latencyMs": "1219"
            },
            "generated_answer": "even_values = [(val, idx) for idx, val in enumerate(arr) if val % 2 == 0]\nif even_values:\n    return min(even_values, key=lambda x: (x[0], x[1]))\nreturn []",
            "expected_answer": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
            "question": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "375",
                "outputTokens": "37",
                "totalTokens": "412",
                "latencyMs": "1017"
            },
            "generated_answer": "from collections import Counter\nfreq = Counter(lst)\nresult = max((num for num in freq if freq[num] >= num), default=-1)\nreturn result",
            "expected_answer": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
            "question": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "341",
                "outputTokens": "51",
                "totalTokens": "392",
                "latencyMs": "1124"
            },
            "generated_answer": "result = []\nsorted_lst = sorted(lst)\nwhile sorted_lst:\n    result.append(sorted_lst.pop(0))\n    if sorted_lst:\n        result.append(sorted_lst.pop(-1))\nreturn result",
            "expected_answer": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
            "question": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "328",
                "outputTokens": "77",
                "totalTokens": "405",
                "latencyMs": "1862"
            },
            "generated_answer": "if a + b > c and a + c > b and b + c > a:\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    return round(area, 2)\nelse:\n    return -1",
            "expected_answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
            "question": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "460",
                "outputTokens": "34",
                "totalTokens": "494",
                "latencyMs": "962"
            },
            "generated_answer": "total_sum = sum(q)\nis_palindrome = q == q[::-1]\nreturn total_sum <= w and is_palindrome",
            "expected_answer": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
            "question": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "370",
                "outputTokens": "72",
                "totalTokens": "442",
                "latencyMs": "1416"
            },
            "generated_answer": "from collections import Counter\n\ndef smallest_change(arr):\n    counter = Counter(arr)\n    odd_count = sum(1 for k, v in counter.items() if v % 2 != 0)\n    return (len(arr) - max(counter.values())) // 2 if odd_count > 1 else 0",
            "expected_answer": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "question": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "431",
                "outputTokens": "74",
                "totalTokens": "505",
                "latencyMs": "1442"
            },
            "generated_answer": "total_chars_lst1 = sum(len(s) for s in lst1)\ntotal_chars_lst2 = sum(len(s) for s in lst2)\n\nif total_chars_lst1 <= total_chars_lst2:\n    return lst1\nelse:\n    return lst2",
            "expected_answer": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
            "question": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "289",
                "outputTokens": "152",
                "totalTokens": "441",
                "latencyMs": "2838"
            },
            "generated_answer": "primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\ncount = 0\nfor prime in primes:\n    if a % prime == 0:\n        count += 1\n        a //= prime\n    if count > 3:\n        return False\nreturn count == 3 and a == 1",
            "expected_answer": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
            "question": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "359",
                "outputTokens": "39",
                "totalTokens": "398",
                "latencyMs": "1065"
            },
            "generated_answer": "if x < 1 or n < 1:\n    return False\nelse:\n    power = n ** int(round(math.log(x, n)))\n    return power == x",
            "expected_answer": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
            "question": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "318",
                "outputTokens": "13",
                "totalTokens": "331",
                "latencyMs": "679"
            },
            "generated_answer": "return round(a**(1/3))**3 == a",
            "expected_answer": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
            "question": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "527",
                "outputTokens": "59",
                "totalTokens": "586",
                "latencyMs": "1248"
            },
            "generated_answer": "prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\ncount = 0\nfor digit in num:\n    if digit in prime_hex_digits:\n        count += 1\nreturn count",
            "expected_answer": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
            "question": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "355",
                "outputTokens": "19",
                "totalTokens": "374",
                "latencyMs": "706"
            },
            "generated_answer": "binary = bin(decimal)[2:]\nreturn \"db\" + binary + \"db\"",
            "expected_answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
            "question": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "330",
                "outputTokens": "50",
                "totalTokens": "380",
                "latencyMs": "1541"
            },
            "generated_answer": "if len(s) < 3:\n    return False\n\nfor i in range(len(s) - 2):\n    if len(set(s[i:i+3])) != 3:\n        return False\nreturn True",
            "expected_answer": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
            "question": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "476",
                "outputTokens": "278",
                "totalTokens": "754",
                "latencyMs": "4066"
            },
            "generated_answer": "letter_grades = []\nfor gpa in grades:\n    if gpa == 4.0:\n        letter_grades.append('A+')\n    elif gpa > 3.7:\n        letter_grades.append('A')\n    elif gpa > 3.3:\n        letter_grades.append('A-')\n    elif gpa > 3.0:\n        letter_grades.append('B+')\n    elif gpa > 2.7:\n        letter_grades.append('B')\n    elif gpa > 2.3:\n        letter_grades.append('B-')\n    elif gpa > 2.0:\n        letter_grades.append('C+')\n    elif gpa > 1.7:\n        letter_grades.append('C')\n    elif gpa > 1.3:\n        letter_grades.append('C-')\n    elif gpa > 1.0:\n        letter_grades.append('D+')\n    elif gpa > 0.7:\n        letter_grades.append('D')\n    elif gpa > 0.0:\n        letter_grades.append('D-')\n    else:\n        letter_grades.append('E')\nreturn letter_grades",
            "expected_answer": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
            "question": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "288",
                "outputTokens": "68",
                "totalTokens": "356",
                "latencyMs": "1358"
            },
            "generated_answer": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\nlength = len(string)\nreturn is_prime(length)",
            "expected_answer": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
            "question": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "250",
                "outputTokens": "36",
                "totalTokens": "286",
                "latencyMs": "1292"
            },
            "generated_answer": "count = 0\nif n == 1:\n    return 1\nelse:\n    count = 2 * (10 ** (n - 1))\nreturn count",
            "expected_answer": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
            "question": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "350",
                "outputTokens": "28",
                "totalTokens": "378",
                "latencyMs": "828"
            },
            "generated_answer": "binary_sum = bin(sum(int(digit) for digit in str(N)))[2:] \nreturn binary_sum",
            "expected_answer": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
            "question": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "262",
                "outputTokens": "34",
                "totalTokens": "296",
                "latencyMs": "1060"
            },
            "generated_answer": "return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)",
            "expected_answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "question": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "336",
                "outputTokens": "44",
                "totalTokens": "380",
                "latencyMs": "1766"
            },
            "generated_answer": "words = s.split()\nresult = []\nfor word in words:\n    sorted_word = ''.join(sorted(word))\n    result.append(sorted_word)\nreturn ' '.join(result)",
            "expected_answer": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
            "question": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "473",
                "outputTokens": "59",
                "totalTokens": "532",
                "latencyMs": "1361"
            },
            "generated_answer": "coordinates = []\nfor i, row in enumerate(lst):\n    for j, value in enumerate(row):\n        if value == x:\n            coordinates.append((i, j))\ncoordinates.sort(key=lambda x: (x[0], -x[1]))\nreturn coordinates",
            "expected_answer": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
            "question": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "421",
                "outputTokens": "44",
                "totalTokens": "465",
                "latencyMs": "1130"
            },
            "generated_answer": "sorted_array = sorted(array)\nif (array[0] + array[-1]) % 2 != 0:\n    return sorted_array\nelse:\n    return sorted_array[::-1]",
            "expected_answer": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
            "question": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "314",
                "outputTokens": "106",
                "totalTokens": "420",
                "latencyMs": "1852"
            },
            "generated_answer": "```python\nresult = ''\nfor char in s:\n    if 'a' <= char <= 'z':\n        result += chr((ord(char) - ord('a') + 8) % 26 + ord('a'))\n    elif 'A' <= char <= 'Z':\n        result += chr((ord(char) - ord('A') + 8) % 26 + ord('A'))\n    else:\n        result += char\nreturn result\n```",
            "expected_answer": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
            "question": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "339",
                "outputTokens": "60",
                "totalTokens": "399",
                "latencyMs": "1282"
            },
            "generated_answer": "if len(lst) < 2:\n    return None\nelse:\n    unique_lst = list(set(lst))\n    if len(unique_lst) < 2:\n        return None\n    else:\n        unique_lst.sort()\n        return unique_lst[1]",
            "expected_answer": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
            "question": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "312",
                "outputTokens": "63",
                "totalTokens": "375",
                "latencyMs": "1511"
            },
            "generated_answer": "sentences = S.split('.')\n    sentences = [s.strip() for s in sentences if s.strip()]\n    boredom_count = 0\n    for sentence in sentences:\n        if sentence.lower().startswith('i'):\n            boredom_count += 1\n    return boredom_count",
            "expected_answer": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
            "question": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "349",
                "outputTokens": "54",
                "totalTokens": "403",
                "latencyMs": "1182"
            },
            "generated_answer": "if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n    return (x == y + z) or (y == x + z) or (z == x + y)\nelse:\n    return False",
            "expected_answer": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
            "question": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "309",
                "outputTokens": "107",
                "totalTokens": "416",
                "latencyMs": "1882"
            },
            "generated_answer": "encoded_message = \"\"\nvowels = \"aeiouAEIOU\"\nnext_vowels = \"gikquGIKQU\"\n\nfor char in message:\n    if char.islower():\n        encoded_message += char.upper() if char not in vowels else next_vowels[vowels.index(char)]\n    else:\n        encoded_message += char.lower() if char not in vowels else next_vowels[vowels.index(char)]\n\nreturn encoded_message",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
            "question": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "543",
                "outputTokens": "119",
                "totalTokens": "662",
                "latencyMs": "2019"
            },
            "generated_answer": "```\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nlargest_prime = 0\nfor num in lst:\n    if is_prime(num) and num > largest_prime:\n        largest_prime = num\n\nreturn sum(int(digit) for digit in str(largest_prime)) if largest_prime != 0 else 0\n```",
            "expected_answer": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
            "question": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "388",
                "outputTokens": "62",
                "totalTokens": "450",
                "latencyMs": "1333"
            },
            "generated_answer": "if not dict:\n    return False\n\nkeys = dict.keys()\nif all(isinstance(key, str) for key in keys):\n    if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n        return True\nreturn False",
            "expected_answer": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
            "question": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "377",
                "outputTokens": "87",
                "totalTokens": "464",
                "latencyMs": "1654"
            },
            "generated_answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nprimes = []\nfor i in range(2, n):\n    if is_prime(i):\n        primes.append(i)\nreturn primes",
            "expected_answer": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
            "question": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "315",
                "outputTokens": "38",
                "totalTokens": "353",
                "latencyMs": "1045"
            },
            "generated_answer": "unit_a = abs(a) % 10\nunit_b = abs(b) % 10\nproduct = unit_a * unit_b\nreturn product",
            "expected_answer": "    return abs(a % 10) * abs(b % 10)\n",
            "question": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "281",
                "outputTokens": "52",
                "totalTokens": "333",
                "latencyMs": "1013"
            },
            "generated_answer": "count = 0\nuppercase_vowels = 'AEIOU'\nfor index, char in enumerate(s):\n    if index % 2 == 0 and char in uppercase_vowels:\n        count += 1\nreturn count",
            "expected_answer": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
            "question": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "368",
                "outputTokens": "38",
                "totalTokens": "406",
                "latencyMs": "851"
            },
            "generated_answer": "value_float = float(value)\nif value_float > 0:\n    return int(round(value_float))\nelse:\n    return int(round(value_float))",
            "expected_answer": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
            "question": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "336",
                "outputTokens": "52",
                "totalTokens": "388",
                "latencyMs": "1009"
            },
            "generated_answer": "pile = []\nfor i in range(n):\n    if n % 2 == 0:\n        pile.append(n + 2 * i)\n    else:\n        pile.append(n + 2 * i + 1)\nreturn pile",
            "expected_answer": "    return [n + 2*i for i in range(n)]\n",
            "question": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "323",
                "outputTokens": "19",
                "totalTokens": "342",
                "latencyMs": "693"
            },
            "generated_answer": "import re\nreturn re.split(',\\\\s*|\\\\s+', s)",
            "expected_answer": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
            "question": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "306",
                "outputTokens": "42",
                "totalTokens": "348",
                "latencyMs": "934"
            },
            "generated_answer": "if x > y:\n    return -1\nfor num in range(y, x - 1, -1):\n    if num % 2 == 0:\n        return num\nreturn -1",
            "expected_answer": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
            "question": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "358",
                "outputTokens": "43",
                "totalTokens": "401",
                "latencyMs": "988"
            },
            "generated_answer": "if n > m:\n    return -1\nelse:\n    avg = round(sum(range(n, m + 1)) / (m - n + 1))\n    return bin(avg)",
            "expected_answer": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
            "question": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "326",
                "outputTokens": "35",
                "totalTokens": "361",
                "latencyMs": "1181"
            },
            "generated_answer": "```python\nreturn [num for num in x if all(int(digit) % 2 != 0 for digit in str(num))].sort()\n```",
            "expected_answer": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
            "question": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "489",
                "outputTokens": "112",
                "totalTokens": "601",
                "latencyMs": "2397"
            },
            "generated_answer": "digits = {1: \"One\", 2: \"Two\", 3: \"Three\", 4: \"Four\", 5: \"Five\", 6: \"Six\", 7: \"Seven\", 8: \"Eight\", 9: \"Nine\"}\nfiltered_arr = [x for x in arr if 1 <= x <= 9]\nsorted_arr = sorted(filtered_arr)\nreversed_arr = sorted_arr[::-1]\nreturn [digits[x] for x in reversed_arr]",
            "expected_answer": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
            "question": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "331",
                "outputTokens": "82",
                "totalTokens": "413",
                "latencyMs": "1783"
            },
            "generated_answer": "```python\nresult = []\nfactorial = 1\nsum_val = 0\nfor i in range(1, n + 1):\n    if i % 2 == 0:\n        factorial *= i\n        result.append(factorial)\n    else:\n        sum_val = sum_val + i\n        result.append(sum_val)\nreturn result\n```",
            "expected_answer": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
            "question": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "421",
                "outputTokens": "86",
                "totalTokens": "507",
                "latencyMs": "1633"
            },
            "generated_answer": "even_count = 0\nodd_count = 0\n\nfor i in range(1, n + 1):\n    str_i = str(i)\n    if str_i == str_i[::-1]:\n        if i % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\nreturn (even_count, odd_count)",
            "expected_answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
            "question": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "344",
                "outputTokens": "78",
                "totalTokens": "422",
                "latencyMs": "1529"
            },
            "generated_answer": "count = 0\nfor num in arr:\n    sum_digits = sum(int(digit) for digit in str(num) if digit.isdigit())\n    if num < 0:\n        sum_digits -= 2 * int(str(num)[1])\n    if sum_digits > 0:\n        count += 1\nreturn count",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
            "question": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "517",
                "outputTokens": "40",
                "totalTokens": "557",
                "latencyMs": "1667"
            },
            "generated_answer": "if not arr:\n    return True\nfor i in range(len(arr)):\n    if arr == sorted(arr[i:] + arr[:i]):\n        return True\nreturn False",
            "expected_answer": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
            "question": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "415",
                "outputTokens": "82",
                "totalTokens": "497",
                "latencyMs": "1334"
            },
            "generated_answer": "odd_in_lst1 = [x for x in lst1 if x % 2 != 0]\neven_in_lst2 = [x for x in lst2 if x % 2 == 0]\n\nif len(odd_in_lst1) <= len(even_in_lst2):\n    return \"YES\"\nelse:\n    return \"NO\"",
            "expected_answer": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
            "question": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "361",
                "outputTokens": "75",
                "totalTokens": "436",
                "latencyMs": "1469"
            },
            "generated_answer": "from collections import Counter\nif not test:\n    return {}\nletters = test.split()\ncounted_letters = Counter(letters)\nmax_count = max(counted_letters.values())\nmost_common = {letter: count for letter, count in counted_letters.items() if count == max_count}\nreturn most_common",
            "expected_answer": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
            "question": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "381",
                "outputTokens": "48",
                "totalTokens": "429",
                "latencyMs": "1530"
            },
            "generated_answer": "result_str = ''.join([char for char in s if char not in c])\nis_palindrome = result_str == result_str[::-1]\nreturn (result_str, is_palindrome)",
            "expected_answer": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
            "question": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "390",
                "outputTokens": "111",
                "totalTokens": "501",
                "latencyMs": "2054"
            },
            "generated_answer": "[\n    f\"the number of odd elements {sum(1 for c in s if int(c) % 2 != 0)}n the str{sum(1 for c in s if int(c) % 2 != 0)}ng {sum(1 for c in s if int(c) % 2 != 0)} of the {sum(1 for c in s if int(c) % 2 != 0)}nput.\"\n    for s in lst\n]",
            "expected_answer": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
            "question": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "298",
                "outputTokens": "57",
                "totalTokens": "355",
                "latencyMs": "1320"
            },
            "generated_answer": "current_min = total_min = nums[0]\n    \nfor num in nums[1:]:\n    current_min = min(num, current_min + num)\n    total_min = min(total_min, current_min)\n    \nreturn total_min",
            "expected_answer": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
            "question": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "566",
                "outputTokens": "32",
                "totalTokens": "598",
                "latencyMs": "873"
            },
            "generated_answer": "total_operations = 0\nfor row in grid:\n    total_operations += math.ceil(sum(row) / capacity)\nreturn total_operations",
            "expected_answer": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
            "question": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "386",
                "outputTokens": "36",
                "totalTokens": "422",
                "latencyMs": "893"
            },
            "generated_answer": "arr.sort(key=lambda x: (bin(x).count(\"1\"), x) if x >= 0 else (float('-inf'), x))\nreturn arr",
            "expected_answer": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
            "question": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "390",
                "outputTokens": "63",
                "totalTokens": "453",
                "latencyMs": "1206"
            },
            "generated_answer": "result = []\nwords = s.split()\nfor word in words:\n    consonants = 0\n    for char in word:\n        if char.lower() not in 'aeiou':\n            consonants += 1\n    if consonants == n:\n        result.append(word)\nreturn result",
            "expected_answer": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
            "question": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "356",
                "outputTokens": "67",
                "totalTokens": "423",
                "latencyMs": "1556"
            },
            "generated_answer": "vowels = \"aeiouAEIOU\"\nfor i in range(len(word) - 2, -1, -1):\n    if word[i] in vowels and word[i - 1] not in vowels and word[i + 1] not in vowels:\n        return word[i]\nreturn \"\"",
            "expected_answer": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
            "question": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "375",
                "outputTokens": "55",
                "totalTokens": "430",
                "latencyMs": "1324"
            },
            "generated_answer": "counter = 0\nfor s in lst:\n    counter += s.count('(')\n    counter -= s.count(')')\n    if counter < 0:\n        return 'No'\nreturn 'Yes' if counter == 0 else 'No'",
            "expected_answer": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
            "question": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "439",
                "outputTokens": "11",
                "totalTokens": "450",
                "latencyMs": "713"
            },
            "generated_answer": "return sorted(arr, reverse=True)[:k]",
            "expected_answer": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
            "question": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "312",
                "outputTokens": "38",
                "totalTokens": "350",
                "latencyMs": "869"
            },
            "generated_answer": "```python\nreturn sum(lst[i] for i in range(0, len(lst), 2) if lst[i] % 2 != 0)\n```",
            "expected_answer": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
            "question": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "343",
                "outputTokens": "23",
                "totalTokens": "366",
                "latencyMs": "792"
            },
            "generated_answer": "return sum(x for x in arr[:k] if -10 <= x <= 99)",
            "expected_answer": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
            "question": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "441",
                "outputTokens": "72",
                "totalTokens": "513",
                "latencyMs": "1512"
            },
            "generated_answer": "collatz_seq = []\nwhile n != 1:\n    if n % 2 == 0:\n        n = n // 2\n    else:\n        collatz_seq.append(n)\n        n = 3 * n + 1\ncollatz_seq.append(1)\nreturn sorted(collatz_seq)",
            "expected_answer": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
            "question": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "496",
                "outputTokens": "243",
                "totalTokens": "739",
                "latencyMs": "3921"
            },
            "generated_answer": "import re\n\ndef valid_date(date):\n    pattern = r'^(0[1-9]|1[0-2])-(0[1-9]|1\\d|2[0-9]|3[01])-(\\d{4})$'\n    if not re.match(pattern, date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if month in [1, 3, 5, 7, 8, 10, 12] and not(1 <= day <= 31):\n        return False\n    elif month in [4, 6, 9, 11] and not(1 <= day <= 30):\n        return False\n    elif month == 2:\n        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n            if not(1 <= day <= 29):\n                return False\n        else:\n            if not(1 <= day <= 28):\n                return False\n    return True",
            "expected_answer": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
            "question": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "358",
                "outputTokens": "65",
                "totalTokens": "423",
                "latencyMs": "1544"
            },
            "generated_answer": "if ' ' in txt:\n    return txt.split(' ')\nelif ',' in txt:\n    return txt.split(',')\nelse:\n    return sum(1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0)",
            "expected_answer": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
            "question": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "492",
                "outputTokens": "82",
                "totalTokens": "574",
                "latencyMs": "1553"
            },
            "generated_answer": "if len(lst) != len(set(lst)):\n    count_dict = {}\n    for num in lst:\n        if num in count_dict:\n            count_dict[num] += 1\n            if count_dict[num] > 2:\n                return False\n        else:\n            count_dict[num] = 1\nreturn lst == sorted(lst)",
            "expected_answer": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
            "question": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "460",
                "outputTokens": "165",
                "totalTokens": "625",
                "latencyMs": "2865"
            },
            "generated_answer": "```python\ndef is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nstart1, end1 = interval1\nstart2, end2 = interval2\n\n# Find the intersection of the two intervals\nintersection_start = max(start1, start2)\nintersection_end = min(end1, end2)\n\n# Check if there is an intersection\nif intersection_start <= intersection_end:\n    intersection_length = intersection_end - intersection_start\n    return \"YES\" if is_prime(intersection_length) else \"NO\"\nelse:\n    return \"NO\"\n```",
            "expected_answer": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "question": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "336",
                "outputTokens": "71",
                "totalTokens": "407",
                "latencyMs": "1413"
            },
            "generated_answer": "if not arr:\n    return None\n\nsum_magnitudes = sum(abs(num) for num in arr)\nproduct_signs = 1\n\nfor num in arr:\n    if num != 0:\n        product_signs *= (1 if num > 0 else -1)\n\nreturn sum_magnitudes * product_signs",
            "expected_answer": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
            "question": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "636",
                "outputTokens": "284",
                "totalTokens": "920",
                "latencyMs": "4165"
            },
            "generated_answer": "from heapq import heappop, heappush\nfrom itertools import product\n\nn = len(grid)\ndirections = [(0, 1), (1, 0), (0, -1), (-1, 0)]\nmin_heap = [(grid[i][j], i, j, grid[i][j], 1) for i, j in product(range(n), repeat=2)]\nheappush(min_heap, (0, 0, 0, 0, 0))\nvisited = set()\n\nwhile min_heap:\n    val, x, y, path_val, path_len = heappop(min_heap)\n    \n    if (x, y) in visited:\n        continue\n    \n    if path_len == k:\n        return [int(digit) for digit in str(path_val)]\n    \n    visited.add((x, y))\n    \n    for dx, dy in directions:\n        nx, ny = x + dx, y + dy\n        \n        if 0 <= nx < n and 0 <= ny < n:\n            heappush(min_heap, (val + grid[nx][ny], nx, ny, int(str(path_val) + str(grid[nx][ny])), path_len + 1))",
            "expected_answer": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
            "question": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "448",
                "outputTokens": "133",
                "totalTokens": "581",
                "latencyMs": "2140"
            },
            "generated_answer": "if n == 0:\n    return [1]\nelif n == 1:\n    return [1, 3]\nelse:\n    sequence = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            sequence.append(1 + i / 2)\n        else:\n            sequence.append(sequence[i - 1] + sequence[i - 2] + (1 + (i + 1) / 2 if i + 1 <= n else sequence[i + 1 - len(sequence)]))\n    return sequence",
            "expected_answer": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
            "question": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "276",
                "outputTokens": "54",
                "totalTokens": "330",
                "latencyMs": "1234"
            },
            "generated_answer": "product = 1\nhas_odd = False\n\nfor digit in str(n):\n    if int(digit) % 2 != 0:\n        product *= int(digit)\n        has_odd = True\n\nreturn product if has_odd else 0",
            "expected_answer": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
            "question": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "359",
                "outputTokens": "57",
                "totalTokens": "416",
                "latencyMs": "1146"
            },
            "generated_answer": "count = 0\nfor char in string:\n    if char == '[':\n        count += 1\n    elif char == ']':\n        count -= 1\n    if count < 0:\n        return False\nreturn count == 0 and count != len(string)",
            "expected_answer": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
            "question": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "376",
                "outputTokens": "21",
                "totalTokens": "397",
                "latencyMs": "724"
            },
            "generated_answer": "import math\nreturn sum([math.ceil(x)**2 for x in lst])",
            "expected_answer": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
            "question": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "378",
                "outputTokens": "52",
                "totalTokens": "430",
                "latencyMs": "1212"
            },
            "generated_answer": "last_char = txt[-1] if txt else ''\nreturn last_char.isalpha() and (' ' in txt or not txt) and (len(txt.rstrip()) == len(txt) - 1)",
            "expected_answer": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
            "question": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "312",
                "outputTokens": "32",
                "totalTokens": "344",
                "latencyMs": "898"
            },
            "generated_answer": "for i in range(1, len(arr)):\n    if arr[i] < arr[i - 1]:\n        return i\nreturn -1",
            "expected_answer": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
            "question": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "353",
                "outputTokens": "75",
                "totalTokens": "428",
                "latencyMs": "1431"
            },
            "generated_answer": "```python\nnegatives = [x for x in lst if x < 0]\npositives = [x for x in lst if x > 0]\n\nlargest_negative = max(negatives, default=None)\nsmallest_positive = min(positives, default=None)\n\nreturn (largest_negative, smallest_positive)\n```",
            "expected_answer": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
            "question": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "357",
                "outputTokens": "109",
                "totalTokens": "466",
                "latencyMs": "1772"
            },
            "generated_answer": "if isinstance(a, str):\n    a = float(a.replace(',', '.'))\nif isinstance(b, str):\n    b = float(b.replace(',', '.'))\n\nif a > b:\n    return a if not isinstance(b, str) else str(a).replace('.', ',') if ',' in b else a\nelif b > a:\n    return b if not isinstance(a, str) else str(b).replace('.', ',') if ',' in a else b\nelse:\n    return None",
            "expected_answer": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
            "question": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "295",
                "outputTokens": "25",
                "totalTokens": "320",
                "latencyMs": "701"
            },
            "generated_answer": "if n < 8:\n    return False\nif n % 2 != 0:\n    return False\nreturn True",
            "expected_answer": "    return n%2 == 0 and n >= 8\n",
            "question": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "308",
                "outputTokens": "35",
                "totalTokens": "343",
                "latencyMs": "862"
            },
            "generated_answer": "```\nimport math\n\nresult = 1\nfor i in range(1, n + 1):\n    result *= math.factorial(i)\nreturn result\n```",
            "expected_answer": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
            "question": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "320",
                "outputTokens": "96",
                "totalTokens": "416",
                "latencyMs": "1629"
            },
            "generated_answer": "import re\ntext = re.sub(' {2,}', '-', text.strip())\ntext = text.replace(' ', '_')\ntext = text.replace('--', '-')\ntext = '_' + text if text[0] == '-' else text\ntext = text + '_' if text[-1] == '-' else text\ntext = text.replace('_-', '-') \ntext = text.replace('-_', '-') \nreturn text",
            "expected_answer": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
            "question": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "435",
                "outputTokens": "115",
                "totalTokens": "550",
                "latencyMs": "2099"
            },
            "generated_answer": "import re\ndigits_count = sum(c.isdigit() for c in file_name)\ndot_count = file_name.count('.')\nname, ext = file_name.split('.') if '.' in file_name else (file_name, '')\nvalid_extensions = ['txt', 'exe', 'dll']\n\nif (digits_count <= 3 and dot_count == 1 and name and name[0].isalpha() \n    and ext in valid_extensions):\n    return 'Yes'\nreturn 'No'",
            "expected_answer": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
            "question": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "382",
                "outputTokens": "70",
                "totalTokens": "452",
                "latencyMs": "1244"
            },
            "generated_answer": "total_sum = 0\n\nfor index, value in enumerate(lst):\n    if index % 3 == 0:\n        total_sum += value ** 2\n    elif index % 4 == 0:\n        total_sum += value ** 3\n    else:\n        total_sum += value\n\nreturn total_sum",
            "expected_answer": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
            "question": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "355",
                "outputTokens": "87",
                "totalTokens": "442",
                "latencyMs": "1535"
            },
            "generated_answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nwords = sentence.split()\nresult = [word for word in words if is_prime(len(word))]\nreturn ' '.join(result)",
            "expected_answer": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
            "question": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "359",
                "outputTokens": "53",
                "totalTokens": "412",
                "latencyMs": "1083"
            },
            "generated_answer": "from fractions import Fraction\n\ndef simplify(x, n):\n    x_fraction = Fraction(x)\n    n_fraction = Fraction(n)\n    result = x_fraction * n_fraction\n    return result.denominator == 1",
            "expected_answer": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
            "question": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "335",
                "outputTokens": "34",
                "totalTokens": "369",
                "latencyMs": "872"
            },
            "generated_answer": "return sorted(nums, key=lambda x: (sum(int(digit) for digit in str(abs(x))), nums.index(x)))",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
            "question": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "337",
                "outputTokens": "70",
                "totalTokens": "407",
                "latencyMs": "1314"
            },
            "generated_answer": "count = 0\nfor num in nums:\n    if num > 10:\n        str_num = str(abs(num))\n        if str_num[0] in '13579' and str_num[-1] in '13579':\n            count += 1\nreturn count",
            "expected_answer": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
            "question": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "384",
                "outputTokens": "95",
                "totalTokens": "479",
                "latencyMs": "1635"
            },
            "generated_answer": "a = [(i * i - i + 1) for i in range(1, n + 1)]\ncount = 0\n\nfor i in range(n):\n    for j in range(i + 1, n):\n        for k in range(j + 1, n):\n            if (a[i] + a[j] + a[k]) % 3 == 0:\n                count += 1\n\nreturn count",
            "expected_answer": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
            "question": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "406",
                "outputTokens": "123",
                "totalTokens": "529",
                "latencyMs": "1996"
            },
            "generated_answer": "planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n\nif planet1 not in planets or planet2 not in planets:\n    return ()\n\nplanet1_index = planets.index(planet1)\nplanet2_index = planets.index(planet2)\n\nif planet1_index < planet2_index:\n    return tuple(planets[planet1_index+1:planet2_index])\nelse:\n    return tuple(planets[planet2_index+1:planet1_index])",
            "expected_answer": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
            "question": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "394",
                "outputTokens": "51",
                "totalTokens": "445",
                "latencyMs": "1086"
            },
            "generated_answer": "filtered_lst = [s for s in lst if len(s) % 2 == 0]\nsorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\nreturn sorted_lst",
            "expected_answer": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
            "question": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "298",
                "outputTokens": "66",
                "totalTokens": "364",
                "latencyMs": "1231"
            },
            "generated_answer": "def is_prime(num):\n    if num <= 1:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\nreturn x if is_prime(n) else y",
            "expected_answer": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
            "question": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "359",
                "outputTokens": "34",
                "totalTokens": "393",
                "latencyMs": "811"
            },
            "generated_answer": "sum([x**2 for x in lst if isinstance(x, int) and x > 0 and x % 2 != 0])",
            "expected_answer": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
            "question": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "443",
                "outputTokens": "22",
                "totalTokens": "465",
                "latencyMs": "713"
            },
            "generated_answer": "```python\n[abs(a - b) for a, b in zip(game, guess)]\n```",
            "expected_answer": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
            "question": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "487",
                "outputTokens": "111",
                "totalTokens": "598",
                "latencyMs": "2115"
            },
            "generated_answer": "strongest = extensions[0]\nmax_strength = sum(1 for c in strongest if c.isupper()) - sum(1 for c in strongest if c.islower())\n\nfor ext in extensions[1:]:\n    current_strength = sum(1 for c in ext if c.isupper()) - sum(1 for c in ext if c.islower())\n    if current_strength > max_strength:\n        max_strength = current_strength\n        strongest = ext\n\nreturn f\"{class_name}.{strongest}\"",
            "expected_answer": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
            "question": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "343",
                "outputTokens": "69",
                "totalTokens": "412",
                "latencyMs": "1318"
            },
            "generated_answer": "def cycpattern_check(a , b):\n    if len(b) > len(a):\n        return False\n    b_twice = b + b\n    return b in a or any(b_twice[i:i+len(b)] in a for i in range(1, len(b)))",
            "expected_answer": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
            "question": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "278",
                "outputTokens": "70",
                "totalTokens": "348",
                "latencyMs": "1387"
            },
            "generated_answer": "num_str = str(abs(num))\neven_count = sum(1 for digit in num_str if int(digit) % 2 == 0)\nodd_count = sum(1 for digit in num_str if int(digit) % 2 != 0)\nreturn (even_count, odd_count)",
            "expected_answer": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
            "question": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "319",
                "outputTokens": "150",
                "totalTokens": "469",
                "latencyMs": "2615"
            },
            "generated_answer": "```python\nroman_numerals = {\n    1000: 'm', 900: 'cm', 500: 'd', 400: 'cd',\n    100: 'c', 90: 'xc', 50: 'l', 40: 'xl',\n    10: 'x', 9: 'ix', 5: 'v', 4: 'iv', 1: 'i'\n}\n\nresult = ''\nfor value, numeral in roman_numerals.items():\n    while number >= value:\n        result += numeral\n        number -= value\nreturn result\n```",
            "expected_answer": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
            "question": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "317",
                "outputTokens": "29",
                "totalTokens": "346",
                "latencyMs": "912"
            },
            "generated_answer": "sides = sorted([a, b, c])\nreturn sides[0]**2 + sides[1]**2 == sides[2]**2",
            "expected_answer": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
            "question": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "325",
                "outputTokens": "105",
                "totalTokens": "430",
                "latencyMs": "1893"
            },
            "generated_answer": "max_unique_chars = 0\nmax_word = \"\"\nfor word in words:\n    unique_chars = set(word)\n    if len(unique_chars) > max_unique_chars:\n        max_unique_chars = len(unique_chars)\n        max_word = word\n    elif len(unique_chars) == max_unique_chars:\n        if word < max_word:\n            max_word = word\nreturn max_word",
            "expected_answer": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
            "question": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "503",
                "outputTokens": "39",
                "totalTokens": "542",
                "latencyMs": "974"
            },
            "generated_answer": "total_eaten = number + min(need, remaining)\ncarrots_left = remaining - min(need, remaining)\nreturn [total_eaten, carrots_left]",
            "expected_answer": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
            "question": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "411",
                "outputTokens": "109",
                "totalTokens": "520",
                "latencyMs": "2038"
            },
            "generated_answer": "result = operand[0]\nfor i in range(len(operator)):\n    if operator[i] == '+':\n        result += operand[i+1]\n    elif operator[i] == '-':\n        result -= operand[i+1]\n    elif operator[i] == '*':\n        result *= operand[i+1]\n    elif operator[i] == '//':\n        result //= operand[i+1]\n    elif operator[i] == '**':\n        result **= operand[i+1]\nreturn result",
            "expected_answer": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
            "question": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "317",
                "outputTokens": "55",
                "totalTokens": "372",
                "latencyMs": "1218"
            },
            "generated_answer": "result = \"\"\nfor char in s:\n    if char.isalpha():\n        result += char.swapcase()\n    else:\n        result += char\nif not any(char.isalpha() for char in s):\n    return result[::-1]\nreturn result",
            "expected_answer": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
            "question": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "294",
                "outputTokens": "46",
                "totalTokens": "340",
                "latencyMs": "1018"
            },
            "generated_answer": "import hashlib\n\nif text:\n    md5_hash = hashlib.md5()\n    md5_hash.update(text.encode())\n    return md5_hash.hexdigest()\nelse:\n    return None",
            "expected_answer": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
            "question": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "315",
                "outputTokens": "36",
                "totalTokens": "351",
                "latencyMs": "1118"
            },
            "generated_answer": "return sorted([i for i in range(min(a, b), max(a, b) + 1) if i % 2 == 0])",
            "expected_answer": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
            "question": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
            "retrieved_contexts": null
        }
    ],
    "flotorch/nova-micro": [
        {
            "metadata": {
                "inputTokens": "338",
                "outputTokens": "47",
                "totalTokens": "385",
                "latencyMs": "1038"
            },
            "generated_answer": "for i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n        if abs(numbers[i] - numbers[j]) < threshold:\n            return True\nreturn False",
            "expected_answer": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "326",
                "outputTokens": "61",
                "totalTokens": "387",
                "latencyMs": "754"
            },
            "generated_answer": "[\n    group\n    for i, char in enumerate(paren_string.replace(\" \", \"\"))\n    if (group := paren_string[i:].lstrip().split(\")\") if char == \"(\" else group[:-1] + [\")\"])\n    if not group\n][::-1]",
            "expected_answer": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
            "question": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "289",
                "outputTokens": "24",
                "totalTokens": "313",
                "latencyMs": "513"
            },
            "generated_answer": "int_part = int(number)\n    decimal_part = number - int_part\n    return decimal_part",
            "expected_answer": "    return number % 1.0\n",
            "question": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "329",
                "outputTokens": "28",
                "totalTokens": "357",
                "latencyMs": "479"
            },
            "generated_answer": "balance = 0\nfor operation in operations:\n    balance += operation\n    if balance < 0:\n        return True\nreturn False",
            "expected_answer": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "327",
                "outputTokens": "46",
                "totalTokens": "373",
                "latencyMs": "550"
            },
            "generated_answer": "import numpy as np\n\nmean = np.mean(numbers)\nabsolute_deviations = [abs(x - mean) for x in numbers]\nreturn sum(absolute_deviations) / len(numbers)",
            "expected_answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "question": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "306",
                "outputTokens": "49",
                "totalTokens": "355",
                "latencyMs": "548"
            },
            "generated_answer": "interspersed_numbers = []\nfor i, num in enumerate(numbers):\n    interspersed_numbers.append(num)\n    if i < len(numbers) - 1:\n        interspersed_numbers.append(delimeter)\nreturn interspersed_numbers",
            "expected_answer": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
            "question": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "321",
                "outputTokens": "67",
                "totalTokens": "388",
                "latencyMs": "597"
            },
            "generated_answer": "[\n    depth := 0\n    max_depth := 0\n    for char in paren_group:\n        if char == '(':\n            depth += 1\n            max_depth = max(max_depth, depth)\n        elif char == ')':\n            depth -= 1\n    max_depth\n]",
            "expected_answer": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "310",
                "outputTokens": "16",
                "totalTokens": "326",
                "latencyMs": "510"
            },
            "generated_answer": "return [s for s in strings if substring in s]",
            "expected_answer": "    return [x for x in strings if substring in x]\n",
            "question": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "323",
                "outputTokens": "41",
                "totalTokens": "364",
                "latencyMs": "510"
            },
            "generated_answer": "sum_val = 0\nproduct_val = 1\n\nfor num in numbers:\n    sum_val += num\n    product_val *= num\n\nreturn sum_val, product_val",
            "expected_answer": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
            "question": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "309",
                "outputTokens": "34",
                "totalTokens": "343",
                "latencyMs": "556"
            },
            "generated_answer": "[\n    numbers[0],\n    *[max(numbers[i], numbers[i-1]) for i in range(1, len(numbers))]\n]",
            "expected_answer": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
            "question": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "360",
                "outputTokens": "69",
                "totalTokens": "429",
                "latencyMs": "792"
            },
            "generated_answer": "palindrome_suffix = string\n\nwhile not is_palindrome(palindrome_suffix):\n    palindrome_suffix = string[:-1]\n    if not palindrome_suffix:\n        break\n\nprefix = string[len(palindrome_suffix):]\nreturn palindrome_suffix + prefix[::-1]",
            "expected_answer": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
            "question": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "290",
                "outputTokens": "52",
                "totalTokens": "342",
                "latencyMs": "799"
            },
            "generated_answer": "assert len(a) == len(b), \"Strings must be of equal length\"\nresult = ''\nfor i in range(len(a)):\n    result += str(int(a[i]) ^ int(b[i]))\nreturn result",
            "expected_answer": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
            "question": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "311",
                "outputTokens": "18",
                "totalTokens": "329",
                "latencyMs": "511"
            },
            "generated_answer": "if not strings:\n    return None\n    return max(strings, key=len)",
            "expected_answer": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
            "question": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "278",
                "outputTokens": "16",
                "totalTokens": "294",
                "latencyMs": "487"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\n\nreturn a",
            "expected_answer": "    while b:\n        a, b = b, a % b\n    return a\n",
            "question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "268",
                "outputTokens": "19",
                "totalTokens": "287",
                "latencyMs": "1401"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
            "question": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "275",
                "outputTokens": "20",
                "totalTokens": "295",
                "latencyMs": "678"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return ' '.join([str(x) for x in range(n + 1)])\n",
            "question": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "275",
                "outputTokens": "20",
                "totalTokens": "295",
                "latencyMs": "490"
            },
            "generated_answer": "distinct_chars = set(string.lower())\n    return len(distinct_chars)",
            "expected_answer": "    return len(set(string.lower()))\n",
            "question": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "380",
                "outputTokens": "32",
                "totalTokens": "412",
                "latencyMs": "546"
            },
            "generated_answer": "[\n    4 if note == 'o' else 2 if note == 'o|' else 1 for note in music_string.split()\n]",
            "expected_answer": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "300",
                "outputTokens": "63",
                "totalTokens": "363",
                "latencyMs": "643"
            },
            "generated_answer": "count = 0\nindex = 0\nwhile index <= len(string) - len(substring):\n    if string[index:index + len(substring)] == substring:\n        count += 1\n        index += len(substring)\n    else:\n        index += 1\nreturn count",
            "expected_answer": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
            "question": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "318",
                "outputTokens": "108",
                "totalTokens": "426",
                "latencyMs": "867"
            },
            "generated_answer": "numerals = {'zero': 0, 'one': 1, 'two': 2, 'three': 3, 'four': 4, 'five': 5, 'six': 6, 'seven': 7, 'eight': 8, 'nine': 9}\ninput_list = numbers.split()\nsorted_list = sorted(input_list, key=numerals.get)\nreturn ' '.join(sorted_list)",
            "expected_answer": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
            "question": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "378",
                "outputTokens": "103",
                "totalTokens": "481",
                "latencyMs": "665"
            },
            "generated_answer": "min_diff = float('inf')\nclosest_pair = (0, 0)\n\nfor i in range(len(numbers)):\n    for j in range(i + 1, len(numbers)):\n        diff = abs(numbers[i] - numbers[j])\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (min(numbers[i], numbers[j]), max(numbers[i], numbers[j]))\n\nreturn closest_pair",
            "expected_answer": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
            "question": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "335",
                "outputTokens": "41",
                "totalTokens": "376",
                "latencyMs": "544"
            },
            "generated_answer": "min_num = min(numbers)\n    max_num = max(numbers)\n    return [(x - min_num) / (max_num - min_num) for x in numbers]",
            "expected_answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
            "question": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "305",
                "outputTokens": "16",
                "totalTokens": "321",
                "latencyMs": "432"
            },
            "generated_answer": "[val for val in values if isinstance(val, int)]",
            "expected_answer": "    return [x for x in values if isinstance(x, int)]\n",
            "question": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "247",
                "outputTokens": "5",
                "totalTokens": "252",
                "latencyMs": "414"
            },
            "generated_answer": "return len(string)",
            "expected_answer": "    return len(string)\n",
            "question": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "256",
                "outputTokens": "28",
                "totalTokens": "284",
                "latencyMs": "507"
            },
            "generated_answer": "for i in range(n - 1, 0, -1):\n    if n % i == 0:\n        return i",
            "expected_answer": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
            "question": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "330",
                "outputTokens": "57",
                "totalTokens": "387",
                "latencyMs": "592"
            },
            "generated_answer": "factors = []\ni = 2\nwhile i * i <= n:\n    if n % i:\n        i += 1\n    else:\n        n //= i\n        factors.append(i)\nif n > 1:\n    factors.append(n)\nreturn factors",
            "expected_answer": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
            "question": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "294",
                "outputTokens": "45",
                "totalTokens": "339",
                "latencyMs": "552"
            },
            "generated_answer": "seen = set()\nresult = []\nfor num in numbers:\n    if num not in seen and numbers.count(num) == 1:\n        seen.add(num)\n        result.append(num)\nreturn result",
            "expected_answer": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
            "question": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "253",
                "outputTokens": "46",
                "totalTokens": "299",
                "latencyMs": "511"
            },
            "generated_answer": "result = \"\"\n\nfor char in string:\n    if char.islower():\n        result += char.upper()\n    elif char.isupper():\n        result += char.lower()\n    else:\n        result += char\n\nreturn result",
            "expected_answer": "    return string.swapcase()\n",
            "question": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "267",
                "outputTokens": "17",
                "totalTokens": "284",
                "latencyMs": "437"
            },
            "generated_answer": "result = \"\"\n\nfor s in strings:\n    result += s\n\nreturn result",
            "expected_answer": "    return ''.join(strings)\n",
            "question": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "304",
                "outputTokens": "29",
                "totalTokens": "333",
                "latencyMs": "553"
            },
            "generated_answer": "result = []\n\n    for s in strings:\n        if s.startswith(prefix):\n            result.append(s)\n    return result",
            "expected_answer": "    return [x for x in strings if x.startswith(prefix)]\n",
            "question": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "324",
                "outputTokens": "14",
                "totalTokens": "338",
                "latencyMs": "475"
            },
            "generated_answer": "return [x for x in l if x > 0]",
            "expected_answer": "    return [e for e in l if e > 0]\n",
            "question": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "316",
                "outputTokens": "44",
                "totalTokens": "360",
                "latencyMs": "571"
            },
            "generated_answer": "if n <= 1:\n    return False\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n        return False\nreturn True",
            "expected_answer": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
            "question": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "492",
                "outputTokens": "69",
                "totalTokens": "561",
                "latencyMs": "591"
            },
            "generated_answer": "def find_zero(xs: list):\n    if len(xs) % 2 != 0:\n        return None\n    for x in range(-100, 100):\n        if poly(xs, x) == 0:\n            return round(x, 2)\n    return None",
            "expected_answer": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
            "question": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "361",
                "outputTokens": "80",
                "totalTokens": "441",
                "latencyMs": "668"
            },
            "generated_answer": "sorted_values = sorted([l[i] for i in range(len(l)) if i % 3 == 0])  \nresult = []\nfor i in range(len(l)):\n    if i % 3 == 0:\n        result.append(sorted_values.pop(0))\n    else:\n        result.append(l[i])\nreturn result",
            "expected_answer": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
            "question": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "280",
                "outputTokens": "7",
                "totalTokens": "287",
                "latencyMs": "476"
            },
            "generated_answer": "return sorted(set(l))",
            "expected_answer": "    return sorted(list(set(l)))\n",
            "question": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "292",
                "outputTokens": "32",
                "totalTokens": "324",
                "latencyMs": "515"
            },
            "generated_answer": "max_val = l[0]\nfor elem in l:\n    if elem > max_val:\n        max_val = elem\nreturn max_val",
            "expected_answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
            "question": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "283",
                "outputTokens": "47",
                "totalTokens": "330",
                "latencyMs": "514"
            },
            "generated_answer": "count = 0\nfor i in range(1, n):\n    if i % 11 == 0 or i % 13 == 0:\n        count += str(i).count('7')\nreturn count",
            "expected_answer": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
            "question": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "333",
                "outputTokens": "79",
                "totalTokens": "412",
                "latencyMs": "686"
            },
            "generated_answer": "even_values = [l[i] for i in range(0, len(l), 2)]\neven_values.sort()\nresult = []\nfor i in range(len(l)):\n    if i % 2 == 0:\n        result.append(even_values.pop(0))\n    else:\n        result.append(l[i])\nreturn result",
            "expected_answer": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
            "question": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "369",
                "outputTokens": "46",
                "totalTokens": "415",
                "latencyMs": "677"
            },
            "generated_answer": "# cycle elements in each group back to original position.\ngroups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\nreturn \"\".join(groups)",
            "expected_answer": "    return encode_cyclic(encode_cyclic(s))\n",
            "question": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "298",
                "outputTokens": "199",
                "totalTokens": "497",
                "latencyMs": "1023"
            },
            "generated_answer": "def is_prime(num: int) -> bool:\n    if num < 2:\n        return False\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n    return True\n\ndef prime_fib(n: int) -> int:\n    def fibonacci() -> list[int]:\n        fib_sequence = [0, 1]\n        while True:\n            next_fib = fib_sequence[-1] + fib_sequence[-2]\n            yield next_fib\n            fib_sequence.append(next_fib)\n    \n    fib_gen = fibonacci()\n    count = 0\n    while count < n:\n        fib_num = next(fib_gen)\n        if is_prime(fib_num):\n            count += 1\n        if count == n:\n            return fib_num",
            "expected_answer": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
            "question": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "395",
                "outputTokens": "28",
                "totalTokens": "423",
                "latencyMs": "651"
            },
            "generated_answer": "from itertools import combinations\n\nreturn any(sum(t) == 0 for t in combinations(set(l), 3))",
            "expected_answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "question": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "358",
                "outputTokens": "2",
                "totalTokens": "360",
                "latencyMs": "417"
            },
            "generated_answer": "return n",
            "expected_answer": "    return n**2\n",
            "question": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "324",
                "outputTokens": "11",
                "totalTokens": "335",
                "latencyMs": "447"
            },
            "generated_answer": "[x + 1 for x in l]",
            "expected_answer": "    return [(e + 1) for e in l]\n",
            "question": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "385",
                "outputTokens": "29",
                "totalTokens": "414",
                "latencyMs": "492"
            },
            "generated_answer": "seen = set()\n\nfor num in l:\n    if -num in seen:\n        return True\n    seen.add(num)\n\nreturn False",
            "expected_answer": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
            "question": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "304",
                "outputTokens": "75",
                "totalTokens": "379",
                "latencyMs": "931"
            },
            "generated_answer": "return ''.join([str((x >> i) & 1) for i in range(x.bit_length() - 1, -1, -1)]) if base == 2 else ''.join([str(x // (base ** i) % base) for i in range(x.bit_length() // base + 1)])",
            "expected_answer": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
            "question": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "249",
                "outputTokens": "13",
                "totalTokens": "262",
                "latencyMs": "742"
            },
            "generated_answer": "area = 0.5 * a * h\nreturn area",
            "expected_answer": "    return a * h / 2.0\n",
            "question": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "390",
                "outputTokens": "98",
                "totalTokens": "488",
                "latencyMs": "972"
            },
            "generated_answer": "if n == 0: return 0\nif n == 1: return 0\nif n == 2: return 2\nif n == 3: return 0\n\na, b, c, d = 0, 0, 2, 0\nfor _ in range(4, n + 1):\n    a, b, c, d = b, c, d, a + b + c + d\nreturn d",
            "expected_answer": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
            "question": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "283",
                "outputTokens": "71",
                "totalTokens": "354",
                "latencyMs": "967"
            },
            "generated_answer": "sorted_list = sorted(l)\n    n = len(sorted_list)\n    if n % 2 == 0:\n        return (sorted_list[n // 2 - 1] + sorted_list[n // 2]) / 2\n    else:\n        return sorted_list[n // 2]",
            "expected_answer": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
            "question": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "285",
                "outputTokens": "13",
                "totalTokens": "298",
                "latencyMs": "518"
            },
            "generated_answer": "text = text.lower()\nreturn text == text[::-1]",
            "expected_answer": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
            "question": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "314",
                "outputTokens": "56",
                "totalTokens": "370",
                "latencyMs": "584"
            },
            "generated_answer": "result = 1\nbase = 2\nwhile n > 0:\n    if n % 2 == 1:\n        result = (result * base) % p\n    base = (base * base) % p\n    n //= 2\nreturn result",
            "expected_answer": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
            "question": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "304",
                "outputTokens": "38",
                "totalTokens": "342",
                "latencyMs": "500"
            },
            "generated_answer": "return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])",
            "expected_answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
            "question": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "334",
                "outputTokens": "27",
                "totalTokens": "361",
                "latencyMs": "1103"
            },
            "generated_answer": "vowels = \"aeiouAEIOU\"\n    return ''.join([char for char in text if char not in vowels])",
            "expected_answer": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
            "question": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "295",
                "outputTokens": "18",
                "totalTokens": "313",
                "latencyMs": "441"
            },
            "generated_answer": "for num in l:\n    if num >= t:\n        return False\nreturn True",
            "expected_answer": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
            "question": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "254",
                "outputTokens": "4",
                "totalTokens": "258",
                "latencyMs": "492"
            },
            "generated_answer": "return x + y",
            "expected_answer": "    return x + y\n",
            "question": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "369",
                "outputTokens": "18",
                "totalTokens": "387",
                "latencyMs": "553"
            },
            "generated_answer": "from collections import Counter\n\n    return Counter(s0) == Counter(s1)",
            "expected_answer": "    return set(s0) == set(s1)\n",
            "question": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "259",
                "outputTokens": "77",
                "totalTokens": "336",
                "latencyMs": "699"
            },
            "generated_answer": "if n <= 0:\n    raise ValueError(\"n must be a positive integer\")\nelif n == 1:\n    return 1\nelif n == 2:\n    return 1\nelse:\n    a, b = 1, 1\n    for _ in range(2, n):\n        a, b = b, a + b\n    return b",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
            "question": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "293",
                "outputTokens": "54",
                "totalTokens": "347",
                "latencyMs": "618"
            },
            "generated_answer": "stack = []\nfor bracket in brackets:\n    if bracket == '<':\n        stack.append(bracket)\n    elif bracket == '>':\n        if not stack or stack[-1] != '<':\n            return False\n        stack.pop()\nreturn not stack",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "294",
                "outputTokens": "63",
                "totalTokens": "357",
                "latencyMs": "573"
            },
            "generated_answer": "increasing = all(l[i] <= l[i + 1] for i in range(len(l) - 1))\ndecreasing = all(l[i] >= l[i + 1] for i in range(len(l) - 1))\n\nreturn increasing or decreasing",
            "expected_answer": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
            "question": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "332",
                "outputTokens": "14",
                "totalTokens": "346",
                "latencyMs": "429"
            },
            "generated_answer": "return sorted(set(l1) & set(l2))",
            "expected_answer": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
            "question": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "275",
                "outputTokens": "80",
                "totalTokens": "355",
                "latencyMs": "624"
            },
            "generated_answer": "for i in range(n // 2, 1, -1):\n        if n % i == 0:\n            is_prime = True\n            for j in range(2, int(i**0.5) + 1):\n                if i % j == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                return i",
            "expected_answer": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
            "question": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "315",
                "outputTokens": "24",
                "totalTokens": "339",
                "latencyMs": "486"
            },
            "generated_answer": "total = 0\nfor i in range(1, n + 1):\n    total += i\nreturn total",
            "expected_answer": "    return sum(range(n + 1))\n",
            "question": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "291",
                "outputTokens": "52",
                "totalTokens": "343",
                "latencyMs": "613"
            },
            "generated_answer": "stack = []\nfor bracket in brackets:\n    if bracket == \"(\":\n        stack.append(bracket)\n    elif bracket == \")\":\n        if not stack or stack[-1] != \"(\":\n            return False\n        stack.pop()\nreturn not stack",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "319",
                "outputTokens": "31",
                "totalTokens": "350",
                "latencyMs": "478"
            },
            "generated_answer": "result = []\n\n    for i in range(1, len(xs)):\n        result.append(i * xs[i])\n\n    return result",
            "expected_answer": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
            "question": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "365",
                "outputTokens": "107",
                "totalTokens": "472",
                "latencyMs": "675"
            },
            "generated_answer": "if n == 0: return 0\nelif n == 1: return 0\nelif n == 2: return 1\nelse:\n    fibfib_list = [0, 0, 1]\n    for i in range(3, n+1):\n        fibfib_list.append(fibfib_list[-1] + fibfib_list[-2] + fibfib_list[-3])\n    return fibfib_list[-1]",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
            "question": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "333",
                "outputTokens": "62",
                "totalTokens": "395",
                "latencyMs": "623"
            },
            "generated_answer": "\"\"\"\nvowels = 'aeiouAEIOU'\ncount = 0\nfor char in s:\n    if char in vowels:\n        count += 1\nif s and s[-1].lower() == 'y':\n    count += 1\nreturn count\n\"\"\"",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
            "question": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "291",
                "outputTokens": "51",
                "totalTokens": "342",
                "latencyMs": "1013"
            },
            "generated_answer": "x_str = str(x)\n    n = len(x_str)\n    if shift >= n:\n        return x_str[::-1]\n    else:\n        return x_str[-shift:] + x_str[:-shift]",
            "expected_answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
            "question": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "324",
                "outputTokens": "38",
                "totalTokens": "362",
                "latencyMs": "680"
            },
            "generated_answer": "sum_upper = 0\nfor char in s:\n    if 'A' <= char <= 'Z':\n        sum_upper += ord(char)\nreturn sum_upper",
            "expected_answer": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
            "question": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "435",
                "outputTokens": "26",
                "totalTokens": "461",
                "latencyMs": "534"
            },
            "generated_answer": "mango_count = n - sum(int(word) for word in s.split() if word.isdigit())",
            "expected_answer": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
            "question": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "526",
                "outputTokens": "93",
                "totalTokens": "619",
                "latencyMs": "742"
            },
            "generated_answer": "Here is the implementation of the function body:\n\n```python\nmin_even = None\nmin_index = None\nfor i, value in enumerate(arr):\n    if value % 2 == 0:\n        if min_even is None or value < min_even:\n            min_even = value\n            min_index = i\nif min_even is None:\n    return []\nreturn [min_even, min_index]\n```",
            "expected_answer": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
            "question": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "375",
                "outputTokens": "46",
                "totalTokens": "421",
                "latencyMs": "693"
            },
            "generated_answer": "from collections import Counter\n\ndef search(lst):\n    frequency = Counter(lst)\n    for num in sorted(frequency, reverse=True):\n        if frequency[num] >= num:\n            return num\n    return -1",
            "expected_answer": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
            "question": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "341",
                "outputTokens": "75",
                "totalTokens": "416",
                "latencyMs": "698"
            },
            "generated_answer": "if not lst:\n    return []\n\nsorted_lst = sorted(lst)\nresult = []\nwhile sorted_lst:\n    if sorted_lst:\n        result.append(sorted_lst.pop(0))  # pop minimum\n    if sorted_lst:\n        result.append(sorted_lst.pop(-1))  # pop maximum\n\nreturn result",
            "expected_answer": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
            "question": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "329",
                "outputTokens": "71",
                "totalTokens": "400",
                "latencyMs": "734"
            },
            "generated_answer": "s = (a + b + c) / 2\narea = (s * (s - a) * (s - b) * (s - c)) ** 0.5\nreturn round(area, 2) if a + b > c and a + c > b and b + c > a else -1",
            "expected_answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
            "question": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "460",
                "outputTokens": "50",
                "totalTokens": "510",
                "latencyMs": "851"
            },
            "generated_answer": "Here is the implementation of the function body:\n\n```python\ndef will_it_fly(q,w):\n    if q == q[::-1] and sum(q) <= w:\n        return True\n    return False\n```",
            "expected_answer": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
            "question": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "369",
                "outputTokens": "56",
                "totalTokens": "425",
                "latencyMs": "686"
            },
            "generated_answer": "changes = 0\nleft = 0\nright = len(arr) - 1\n\nwhile left < right:\n    if arr[left] != arr[right]:\n        changes += 1\n    left += 1\n    right -= 1\n\nreturn changes",
            "expected_answer": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "question": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "431",
                "outputTokens": "62",
                "totalTokens": "493",
                "latencyMs": "1001"
            },
            "generated_answer": "char_count1 = sum(len(s) for s in lst1)\nchar_count2 = sum(len(s) for s in lst2)\n\nif char_count1 <= char_count2:\n    return lst1\nelse:\n    return lst2",
            "expected_answer": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
            "question": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "288",
                "outputTokens": "124",
                "totalTokens": "412",
                "latencyMs": "839"
            },
            "generated_answer": "from math import isqrt\n\ndef is_multiply_prime(a: int) -> bool:\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, isqrt(n) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, a + 1):\n        if a % i == 0 and is_prime(i):\n            a //= i\n            count += 1\n    return count == 3",
            "expected_answer": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
            "question": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "360",
                "outputTokens": "19",
                "totalTokens": "379",
                "latencyMs": "490"
            },
            "generated_answer": "while x % n == 0:\n        x //= n\n    return x == 1",
            "expected_answer": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
            "question": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "318",
                "outputTokens": "24",
                "totalTokens": "342",
                "latencyMs": "516"
            },
            "generated_answer": "import math\n\nreturn int(math.pow(round(math.cbrt(a)), 3)) == a",
            "expected_answer": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
            "question": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "526",
                "outputTokens": "59",
                "totalTokens": "585",
                "latencyMs": "549"
            },
            "generated_answer": "prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\ncount = 0\n\nfor digit in num:\n    if digit in prime_hex_digits:\n        count += 1\n\nreturn count",
            "expected_answer": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
            "question": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "355",
                "outputTokens": "24",
                "totalTokens": "379",
                "latencyMs": "487"
            },
            "generated_answer": "binary_str = 'db' + bin(decimal)[2:] + 'db'\nreturn binary_str",
            "expected_answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
            "question": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "330",
                "outputTokens": "50",
                "totalTokens": "380",
                "latencyMs": "558"
            },
            "generated_answer": "if len(s) < 3:\n    return False\n\nfor i in range(len(s) - 2):\n    if len(set(s[i:i+3])) != 3:\n        return False\n\nreturn True",
            "expected_answer": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
            "question": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "476",
                "outputTokens": "434",
                "totalTokens": "910",
                "latencyMs": "1619"
            },
            "generated_answer": "[\n    'letter_grade = \"\"' + '\\n'\n    'if grades[i] >= 4.0:' + '\\n'\n    '    letter_grade = \"A+\"' + '\\n'\n    'elif grades[i] > 3.7:' + '\\n'\n    '    letter_grade = \"A\"' + '\\n'\n    'elif grades[i] > 3.3:' + '\\n'\n    '    letter_grade = \"A-\"' + '\\n'\n    'elif grades[i] > 3.0:' + '\\n'\n    '    letter_grade = \"B+\"' + '\\n'\n    'elif grades[i] > 2.7:' + '\\n'\n    '    letter_grade = \"B\"' + '\\n'\n    'elif grades[i] > 2.3:' + '\\n'\n    '    letter_grade = \"B-\"' + '\\n'\n    'elif grades[i] > 2.0:' + '\\n'\n    '    letter_grade = \"C+\"' + '\\n'\n    'elif grades[i] > 1.7:' + '\\n'\n    '    letter_grade = \"C\"' + '\\n'\n    'elif grades[i] > 1.3:' + '\\n'\n    '    letter_grade = \"C-\"' + '\\n'\n    'elif grades[i] > 1.0:' + '\\n'\n    '    letter_grade = \"D+\"' + '\\n'\n    'elif grades[i] > 0.7:' + '\\n'\n    '    letter_grade = \"D\"' + '\\n'\n    'elif grades[i] > 0.0:' + '\\n'\n    '    letter_grade = \"D-\"' + '\\n'\n    'else:' + '\\n'\n    '    letter_grade = \"E\"' + '\\n'\n]",
            "expected_answer": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
            "question": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "288",
                "outputTokens": "73",
                "totalTokens": "361",
                "latencyMs": "669"
            },
            "generated_answer": "def prime_length(string):\n    def is_prime(n):\n        if n <= 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n    return is_prime(len(string))",
            "expected_answer": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
            "question": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "251",
                "outputTokens": "36",
                "totalTokens": "287",
                "latencyMs": "558"
            },
            "generated_answer": "count = 0\nfor i in range(1, n):\n    count += 2 if i == 1 or i == n-1 else 1\nreturn count",
            "expected_answer": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
            "question": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "349",
                "outputTokens": "43",
                "totalTokens": "392",
                "latencyMs": "596"
            },
            "generated_answer": "    binary_sum = 0\n    while N > 0:\n        binary_sum += N % 2\n        N //= 2\n    return bin(binary_sum)[2:]",
            "expected_answer": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
            "question": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "262",
                "outputTokens": "13",
                "totalTokens": "275",
                "latencyMs": "455"
            },
            "generated_answer": "sum(lst[1::2][::2])",
            "expected_answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "question": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "337",
                "outputTokens": "53",
                "totalTokens": "390",
                "latencyMs": "549"
            },
            "generated_answer": "def anti_shuffle(s):\n    words = s.split(' ')\n    ordered_words = []\n    for word in words:\n        ordered_words.append(''.join(sorted(word)))\n    return ' '.join(ordered_words)",
            "expected_answer": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
            "question": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "473",
                "outputTokens": "82",
                "totalTokens": "555",
                "latencyMs": "822"
            },
            "generated_answer": "coordinates = []\n\nfor row_index, row in enumerate(lst):\n    for col_index, value in enumerate(row):\n        if value == x:\n            coordinates.append((row_index, col_index))\n\ncoordinates.sort(key=lambda coord: coord[0])\ncoordinates.sort(key=lambda coord: coord[1], reverse=True)\n\nreturn coordinates",
            "expected_answer": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
            "question": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "421",
                "outputTokens": "62",
                "totalTokens": "483",
                "latencyMs": "604"
            },
            "generated_answer": "copy_array = list(array)\n    \n    if sum(copy_array[0], copy_array[-1]) % 2 == 0:\n        copy_array.sort(reverse=True)\n    else:\n        copy_array.sort()\n    \n    return copy_array",
            "expected_answer": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
            "question": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "314",
                "outputTokens": "42",
                "totalTokens": "356",
                "latencyMs": "558"
            },
            "generated_answer": "return ''.join(chr((ord(char) - 97 + 4) % 26 + 97) for char in s if 'a' <= char <= 'z')",
            "expected_answer": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
            "question": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "339",
                "outputTokens": "69",
                "totalTokens": "408",
                "latencyMs": "705"
            },
            "generated_answer": "if len(lst) < 2: return None\n    smallest = min(lst)\n    second_smallest = None\n    for num in lst:\n        if num > smallest and (second_smallest is None or num < second_smallest):\n            second_smallest = num\n    return second_smallest",
            "expected_answer": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
            "question": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "312",
                "outputTokens": "49",
                "totalTokens": "361",
                "latencyMs": "540"
            },
            "generated_answer": "sentences = S.split('.') + S.split('?') + S.split('!')\n    count = 0\n    for sentence in sentences:\n        if sentence.strip().startswith('I'):\n            count += 1\n    return count",
            "expected_answer": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
            "question": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "350",
                "outputTokens": "69",
                "totalTokens": "419",
                "latencyMs": "605"
            },
            "generated_answer": "return any(x == y + z or y == x + z or z == x + y for x, y, z in [(x, y, z), (x, z, y), (y, x, z), (y, z, x), (z, x, y), (z, y, x)])",
            "expected_answer": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
            "question": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "309",
                "outputTokens": "124",
                "totalTokens": "433",
                "latencyMs": "801"
            },
            "generated_answer": "'''\n    message = message.lower()\n    vowels = 'aeiou'\n    encoded = ''\n    for char in message:\n        if char.isalpha():\n            if char in vowels:\n                new_char = chr((ord(char) - ord('a') + 2) % 26 + ord('a'))\n                encoded += new_char.upper() if char.islower() else new_char\n            else:\n                encoded += char.upper() if char.islower() else char.lower()\n        else:\n            encoded += char\n    return encoded\n'''",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
            "question": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "542",
                "outputTokens": "128",
                "totalTokens": "670",
                "latencyMs": "1291"
            },
            "generated_answer": "Here is the implementation of the function body:\n\n```python\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\nlargest_prime = max((x for x in lst if is_prime(x)), default=0)\nreturn sum_of_digits(largest_prime)\n```",
            "expected_answer": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
            "question": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "388",
                "outputTokens": "102",
                "totalTokens": "490",
                "latencyMs": "848"
            },
            "generated_answer": "if not dict:\n    return False\n\nfirst_key = next(iter(dict.keys()), None)\nis_lower = first_key and first_key.islower()\nis_upper = first_key and first_key.isupper()\n\nfor key in dict:\n    if not isinstance(key, str):\n        return False\n    if (is_lower and not key.islower()) or (is_upper and not key.isupper()):\n        return False\n\nreturn True",
            "expected_answer": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
            "question": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "376",
                "outputTokens": "41",
                "totalTokens": "417",
                "latencyMs": "607"
            },
            "generated_answer": "[\n    i for i in range(2, n) if all(i % j != 0 for j in range(2, int(i**0.5) + 1))\n]",
            "expected_answer": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
            "question": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "315",
                "outputTokens": "28",
                "totalTokens": "343",
                "latencyMs": "499"
            },
            "generated_answer": "unit_a = a % 10\nunit_b = b % 10\nreturn unit_a * unit_b",
            "expected_answer": "    return abs(a % 10) * abs(b % 10)\n",
            "question": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "282",
                "outputTokens": "40",
                "totalTokens": "322",
                "latencyMs": "516"
            },
            "generated_answer": "count = 0\nfor i in range(0, len(s), 2):\n    if s[i] in 'AEIOU':\n        count += 1\nreturn count",
            "expected_answer": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
            "question": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "367",
                "outputTokens": "36",
                "totalTokens": "403",
                "latencyMs": "459"
            },
            "generated_answer": "float_value = float(value)\n    if float_value >= 0:\n        return round(float_value)\n    else:\n        return round(float_value)",
            "expected_answer": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
            "question": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "336",
                "outputTokens": "49",
                "totalTokens": "385",
                "latencyMs": "576"
            },
            "generated_answer": "pile = []\ncurrent = n\n\nfor _ in range(n):\n    pile.append(current)\n    if n % 2 == 0:\n        current += 2\n    else:\n        current += 2\n\nreturn pile",
            "expected_answer": "    return [n + 2*i for i in range(n)]\n",
            "question": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "322",
                "outputTokens": "19",
                "totalTokens": "341",
                "latencyMs": "484"
            },
            "generated_answer": "import re\n\n    return re.split(r'[\\s,]+', s)",
            "expected_answer": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
            "question": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "306",
                "outputTokens": "32",
                "totalTokens": "338",
                "latencyMs": "556"
            },
            "generated_answer": "for num in range(y, x - 1, -1):\n    if num % 2 == 0:\n        return num\nreturn -1",
            "expected_answer": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
            "question": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "357",
                "outputTokens": "41",
                "totalTokens": "398",
                "latencyMs": "902"
            },
            "generated_answer": "if n > m:\n    return -1\n    avg = sum(range(n, m + 1)) / (m - n + 1)\n    return bin(round(avg))",
            "expected_answer": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
            "question": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "326",
                "outputTokens": "27",
                "totalTokens": "353",
                "latencyMs": "528"
            },
            "generated_answer": "[num for num in sorted(x) if all(int(digit) % 2 for digit in str(num))]",
            "expected_answer": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
            "question": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "490",
                "outputTokens": "70",
                "totalTokens": "560",
                "latencyMs": "615"
            },
            "generated_answer": "names = [\"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"]\nresult = []\nfor num in arr:\n    if 1 <= num <= 9:\n        result.append(names[num - 1])\nreturn result[::-1] if result else []",
            "expected_answer": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
            "question": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "331",
                "outputTokens": "89",
                "totalTokens": "420",
                "latencyMs": "625"
            },
            "generated_answer": "result = []\n\nfor i in range(1, n+1):\n    if i % 2 == 0:\n        fact = 1\n        for j in range(1, i+1):\n            fact *= j\n        result.append(fact)\n    else:\n        total = 0\n        for j in range(1, i+1):\n            total += j\n        result.append(total)\n\nreturn result",
            "expected_answer": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
            "question": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "422",
                "outputTokens": "79",
                "totalTokens": "501",
                "latencyMs": "602"
            },
            "generated_answer": "count_even = 0\ncount_odd = 0\nfor i in range(1, n + 1):\n    if str(i) == str(i)[::-1]:\n        if i % 2 == 0:\n            count_even += 1\n        else:\n            count_odd += 1\nreturn (count_even, count_odd)",
            "expected_answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
            "question": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "344",
                "outputTokens": "39",
                "totalTokens": "383",
                "latencyMs": "483"
            },
            "generated_answer": "count = 0\n\nfor num in arr:\n    if sum(int(digit) for digit in str(abs(num))) > 0:\n        count += 1\nreturn count",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
            "question": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "518",
                "outputTokens": "54",
                "totalTokens": "572",
                "latencyMs": "622"
            },
            "generated_answer": "if not arr:\n    return True\nsorted_arr = sorted(arr)\nfor _ in range(len(arr)):\n    if arr == sorted_arr:\n        return True\n    arr = arr[-1:] + arr[:-1]\nreturn False",
            "expected_answer": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
            "question": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "416",
                "outputTokens": "119",
                "totalTokens": "535",
                "latencyMs": "684"
            },
            "generated_answer": "even_lst1 = [x for x in lst1 if x % 2 == 0]\n    odd_lst1 = [x for x in lst1 if x % 2 != 0]\n    odd_lst2 = [x for x in lst2 if x % 2 != 0]\n    \n    if len(odd_lst1) == 0:\n        return \"YES\"\n    \n    if len(odd_lst2) >= len(odd_lst1):\n        return \"YES\"\n    \n    return \"NO\"",
            "expected_answer": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
            "question": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "360",
                "outputTokens": "52",
                "totalTokens": "412",
                "latencyMs": "559"
            },
            "generated_answer": "from collections import Counter\n\n    cnt = Counter(test.split())\n    max_count = max(cnt.values(), default=0)\n    return {k: v for k, v in cnt.items() if v == max_count}",
            "expected_answer": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
            "question": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "381",
                "outputTokens": "41",
                "totalTokens": "422",
                "latencyMs": "1298"
            },
            "generated_answer": "result = \"\"\nfor char in s:\n    if char not in c:\n        result += char\n\nis_palindrome = result == result[::-1]\nreturn result, is_palindrome",
            "expected_answer": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
            "question": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "390",
                "outputTokens": "82",
                "totalTokens": "472",
                "latencyMs": "633"
            },
            "generated_answer": "def odd_count(lst):\n    result = []\n    for i, s in enumerate(lst):\n        odd_digits = sum(int(c) % 2 for c in s)\n        result.append(f\"the number of odd elements in the str{odd_digits}ng {i} of the {odd_digits}nput.\")\n    return result",
            "expected_answer": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
            "question": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "298",
                "outputTokens": "65",
                "totalTokens": "363",
                "latencyMs": "590"
            },
            "generated_answer": "if not nums:\n    return 0\n\nmin_sum = float('inf')\ncurrent_sum = 0\n\nfor num in nums:\n    current_sum = min(num, current_sum + num)\n    min_sum = min(min_sum, current_sum)\n\nreturn min_sum",
            "expected_answer": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
            "question": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "565",
                "outputTokens": "48",
                "totalTokens": "613",
                "latencyMs": "614"
            },
            "generated_answer": "    count = 0\n    for row in grid:\n        water_units = row.count(1)\n        if water_units > 0:\n            count += math.ceil(water_units / capacity)\n    return count",
            "expected_answer": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
            "question": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "386",
                "outputTokens": "29",
                "totalTokens": "415",
                "latencyMs": "510"
            },
            "generated_answer": "def sort_array(arr):\n    return sorted(arr, key=lambda x: (bin(x).count('1'), x))",
            "expected_answer": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
            "question": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "391",
                "outputTokens": "42",
                "totalTokens": "433",
                "latencyMs": "548"
            },
            "generated_answer": "[\n    word for word in s.split() \n    if sum(1 for c in word if c.isalpha() and c.lower() not in 'aeiou') == n\n]",
            "expected_answer": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
            "question": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "356",
                "outputTokens": "73",
                "totalTokens": "429",
                "latencyMs": "643"
            },
            "generated_answer": "for i in range(len(word) - 2, 0, -1):\n    if word[i] in 'AEIOUaeiou' and word[i-1] not in 'AEIOUaeiou' and word[i+1] not in 'AEIOUaeiou':\n        return word[i]\nreturn \"\"",
            "expected_answer": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
            "question": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "375",
                "outputTokens": "80",
                "totalTokens": "455",
                "latencyMs": "1684"
            },
            "generated_answer": "def match_parens(lst):\n    open_count = lst[0].count('(') + lst[1].count('(')\n    close_count = lst[0].count(')') + lst[1].count(')')\n    if open_count == close_count:\n        return 'Yes'\n    else:\n        return 'No'",
            "expected_answer": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
            "question": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "438",
                "outputTokens": "11",
                "totalTokens": "449",
                "latencyMs": "639"
            },
            "generated_answer": "arr.sort()\nreturn arr[-k:]",
            "expected_answer": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
            "question": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "312",
                "outputTokens": "61",
                "totalTokens": "373",
                "latencyMs": "619"
            },
            "generated_answer": "sum_odd_even_pos = 0\nfor i in range(0, len(lst), 2):\n    if lst[i] % 2 != 0:\n        sum_odd_even_pos += lst[i]\nreturn sum_odd_even_pos",
            "expected_answer": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
            "question": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "344",
                "outputTokens": "33",
                "totalTokens": "377",
                "latencyMs": "508"
            },
            "generated_answer": "sum_elements = sum(x for i, x in enumerate(arr, 1) if i <= k and 1 <= x <= 99)",
            "expected_answer": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
            "question": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "442",
                "outputTokens": "43",
                "totalTokens": "485",
                "latencyMs": "629"
            },
            "generated_answer": "[\n    n,\n    *[x for x in (n * 3 + 1 if n % 2 else n // 2) if x % 2]\n    until n == 1\n]",
            "expected_answer": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
            "question": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "497",
                "outputTokens": "101",
                "totalTokens": "598",
                "latencyMs": "798"
            },
            "generated_answer": "import re\nfrom calendar import monthrange\n\ndef valid_date(date):\n    if not date or not re.match(r'^\\d{2}-\\d{2}-\\d{4}$', date):\n        return False\n    month, day, year = map(int, date.split('-'))\n    if not (1 <= month <= 12) or not (1 <= day <= monthrange(year, month)[1]):\n        return False\n    return True",
            "expected_answer": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
            "question": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "358",
                "outputTokens": "92",
                "totalTokens": "450",
                "latencyMs": "715"
            },
            "generated_answer": "words = []\n\n    if ' ' in txt:\n        words = txt.split(' ')\n    elif ',' in txt:\n        words = txt.split(',')\n    else:\n        count = 0\n        for char in txt.lower():\n            if char.isalpha() and (ord(char) - ord('a')) % 2 == 1:\n                count += 1\n        return count\n\n    return words",
            "expected_answer": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
            "question": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "493",
                "outputTokens": "80",
                "totalTokens": "573",
                "latencyMs": "747"
            },
            "generated_answer": "for i in range(len(lst) - 1):\n    if lst[i] > lst[i + 1]:\n        return False\n    if lst[i] == lst[i + 1] and i + 2 < len(lst) and lst[i] == lst[i + 2]:\n        return False\nreturn True",
            "expected_answer": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
            "question": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "459",
                "outputTokens": "135",
                "totalTokens": "594",
                "latencyMs": "1084"
            },
            "generated_answer": "```\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef intersection(interval1, interval2):\n    start = max(interval1[0], interval2[0])\n    end = min(interval1[1], interval2[1])\n    if start > end:\n        return \"NO\"\n    length = end - start + 1\n    return \"YES\" if is_prime(length) else \"NO\"\n```",
            "expected_answer": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "question": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "337",
                "outputTokens": "94",
                "totalTokens": "431",
                "latencyMs": "760"
            },
            "generated_answer": "if not arr:\n    return None\n\n    product_of_signs = 1\n    sum_of_magnitudes = 0\n    for num in arr:\n        if num == 0:\n            return 0\n        product_of_signs *= (1 if num > 0 else -1)\n        sum_of_magnitudes += abs(num)\n\n    return sum_of_magnitudes * product_of_signs",
            "expected_answer": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
            "question": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "635",
                "outputTokens": "355",
                "totalTokens": "990",
                "latencyMs": "1911"
            },
            "generated_answer": "Here is the implementation of the function `minPath`:\n\n```python\ndef minPath(grid, k):\n    n = len(grid)\n    directions = [(-1, 0), (1, 0), (0, -1), (0, 1), (0, 0)]\n    min_path = [float('inf')] * k\n    visited = [[False] * n for _ in range(n)]\n    \n    def dfs(x, y, path):\n        nonlocal min_path\n        if len(path) == k:\n            if path < min_path:\n                min_path = path[:]\n            return\n        \n        for dx, dy in directions:\n            nx, ny = x + dx, y + dy\n            if 0 <= nx < n and 0 <= ny < n and not visited[nx][ny]:\n                visited[nx][ny] = True\n                dfs(nx, ny, path + [grid[nx][ny]])\n                visited[nx][ny] = False\n    \n    for i in range(n):\n        for j in range(n):\n            visited[i][j] = True\n            dfs(i, j, [grid[i][j]])\n            visited[i][j] = False\n            \n    return min_path\n```\n\nThis function uses depth-first search (DFS) to explore all possible paths of length `k` in the grid. It keeps track of the current path and updates the minimum path whenever it finds a path that is lexicographically smaller than the current minimum path. The function returns the minimum path found.",
            "expected_answer": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
            "question": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "447",
                "outputTokens": "56",
                "totalTokens": "503",
                "latencyMs": "721"
            },
            "generated_answer": "[\n    3 if i == 1 else 1 + i / 2 if i % 2 == 0 else sum([trib(j) for j in range(i-2, i+1)])\n    for i in range(n+1)\n]",
            "expected_answer": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
            "question": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "276",
                "outputTokens": "80",
                "totalTokens": "356",
                "latencyMs": "714"
            },
            "generated_answer": "product = 1\nall_even = True\nwhile n > 0:\n    digit = n % 10\n    if digit % 2 != 0:\n        all_even = False\n        if product == 1:\n            product = digit\n        else:\n            product *= digit\n    n //= 10\nreturn product if not all_even else 0",
            "expected_answer": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
            "question": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "360",
                "outputTokens": "95",
                "totalTokens": "455",
                "latencyMs": "725"
            },
            "generated_answer": "stack = []\nfor char in string:\n    if char == '[':\n        stack.append(char)\n    elif char == ']':\n        if len(stack) > 1 and stack[-1] == '[':\n            stack.pop()\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                stack.append(char)\n        else:\n            stack.append(char)\nreturn len(stack) > 1",
            "expected_answer": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
            "question": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "375",
                "outputTokens": "43",
                "totalTokens": "418",
                "latencyMs": "713"
            },
            "generated_answer": "sum_square = 0\nfor num in lst:\n    rounded_num = int(num + 0.5)\n    sum_square += rounded_num ** 2\nreturn sum_square",
            "expected_answer": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
            "question": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "377",
                "outputTokens": "41",
                "totalTokens": "418",
                "latencyMs": "732"
            },
            "generated_answer": "if not txt or not txt[-1].isalpha():\n    return False\n    return txt[-2] == ' ' if len(txt) > 1 else False",
            "expected_answer": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
            "question": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "313",
                "outputTokens": "32",
                "totalTokens": "345",
                "latencyMs": "466"
            },
            "generated_answer": "for i in range(1, len(arr)):\n    if arr[i] < arr[i - 1]:\n        return i\nreturn -1",
            "expected_answer": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
            "question": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "353",
                "outputTokens": "86",
                "totalTokens": "439",
                "latencyMs": "638"
            },
            "generated_answer": "largest_neg = None\n    smallest_pos = None\n    for num in lst:\n        if num < 0 and (largest_neg is None or num > largest_neg):\n            largest_neg = num\n        if num > 0 and (smallest_pos is None or num < smallest_pos):\n            smallest_pos = num\n    return (largest_neg, smallest_pos)",
            "expected_answer": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
            "question": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "358",
                "outputTokens": "79",
                "totalTokens": "437",
                "latencyMs": "696"
            },
            "generated_answer": "if isinstance(a, str) and ',' in a:\n    a = a.replace(',', '.')\nif isinstance(b, str) and ',' in b:\n    b = b.replace(',', '.')\ntry:\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None\nexcept TypeError:\n    return None",
            "expected_answer": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
            "question": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "296",
                "outputTokens": "50",
                "totalTokens": "346",
                "latencyMs": "602"
            },
            "generated_answer": "if n < 8 or n % 2 != 0:\n    return False\nelse:\n    return n == 8 or n == 10 or n == 12 or n == 14 or n == 16",
            "expected_answer": "    return n%2 == 0 and n >= 8\n",
            "question": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "307",
                "outputTokens": "67",
                "totalTokens": "374",
                "latencyMs": "564"
            },
            "generated_answer": "def special_factorial(n):\n    result = 1\n    factorial = 1\n    for i in range(n, 0, -1):\n        if i == 1:\n            factorial *= 1\n        else:\n            factorial *= i\n        result *= factorial\n    return result",
            "expected_answer": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
            "question": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "320",
                "outputTokens": "28",
                "totalTokens": "348",
                "latencyMs": "503"
            },
            "generated_answer": "text = text.replace(\"  \", \"_\")\nreturn text.replace(\"  \", \"-\").replace(\"_  \", \"_\")",
            "expected_answer": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
            "question": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "435",
                "outputTokens": "188",
                "totalTokens": "623",
                "latencyMs": "1004"
            },
            "generated_answer": "if any(char.isdigit() for char in file_name) > 3:\n    return 'No'\ndot_index = file_name.find('.')\nif dot_index == -1 or dot_index == 0 or dot_index == len(file_name) - 1:\n    return 'No'\nfile_part_before_dot = file_name[:dot_index]\nfile_part_after_dot = file_name[dot_index + 1:]\nif not all(char.isalpha() for char in file_part_before_dot) or file_part_before_dot[0].lower() not in 'abcdefghijklmnopqrstuvwxyz':\n    return 'No'\nif file_part_after_dot not in ['txt', 'exe', 'dll']:\n    return 'No'\nreturn 'Yes'",
            "expected_answer": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
            "question": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "382",
                "outputTokens": "60",
                "totalTokens": "442",
                "latencyMs": "548"
            },
            "generated_answer": "total = 0\n\nfor i, num in enumerate(lst):\n    if i % 3 == 0:\n        total += num ** 2\n    elif i % 4 == 0:\n        total += num ** 3\n    else:\n        total += num\n\nreturn total",
            "expected_answer": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
            "question": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "355",
                "outputTokens": "79",
                "totalTokens": "434",
                "latencyMs": "683"
            },
            "generated_answer": "\"\"\"\n    words = sentence.split()\n    prime_length_words = []\n    for word in words:\n        if len(word) >= 2 and all(len(word) % i != 0 for i in range(2, len(word))):\n            prime_length_words.append(word)\n    return ' '.join(prime_length_words)\n\"\"\"",
            "expected_answer": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
            "question": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "359",
                "outputTokens": "82",
                "totalTokens": "441",
                "latencyMs": "834"
            },
            "generated_answer": "if int(x.split(\"/\")[0]) * int(n.split(\"/\")[1]) % int(n.split(\"/\")[0]) == 0 and int(x.split(\"/\")[1]) * int(n.split(\"/\")[0]) % int(x.split(\"/\")[0]) == 0:\n    return True\nelse:\n    return False",
            "expected_answer": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
            "question": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "334",
                "outputTokens": "54",
                "totalTokens": "388",
                "latencyMs": "1109"
            },
            "generated_answer": "def order_by_points(nums):\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(abs(n)))\n    return sorted(nums, key=sum_of_digits)",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
            "question": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "336",
                "outputTokens": "94",
                "totalTokens": "430",
                "latencyMs": "649"
            },
            "generated_answer": "count = 0\nfor num in nums:\n    if num > 10:\n        str_num = str(abs(num))\n        if int(str_num[0]) in [1, 3, 5, 7, 9] and int(str_num[-1]) in [1, 3, 5, 7, 9]:\n            count += 1\nreturn count",
            "expected_answer": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
            "question": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "384",
                "outputTokens": "78",
                "totalTokens": "462",
                "latencyMs": "695"
            },
            "generated_answer": "[\n    (i, j, k) for i in range(n) \n    for j in range(i+1, n) \n    for k in range(j+1, n) \n    if (i*i-i+1 + j*j-j+1 + k*k-k+1) % 3 == 0\n]",
            "expected_answer": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
            "question": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "406",
                "outputTokens": "138",
                "totalTokens": "544",
                "latencyMs": "883"
            },
            "generated_answer": "'''\nplanets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"]\n    \ndef bf(planet1, planet2):\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    \n    if planet1 == planet2:\n        return ()\n    \n    if planet1 < planet2:\n        start, end = planets.index(planet1), planets.index(planet2)\n    else:\n        start, end = planets.index(planet2), planets.index(planet1)\n    \n    return tuple(planets[start+1:end])\n'''",
            "expected_answer": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
            "question": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "395",
                "outputTokens": "23",
                "totalTokens": "418",
                "latencyMs": "503"
            },
            "generated_answer": "[\n    lst[:],\n    sorted(lst, key=lambda x: (len(x), x))\n]",
            "expected_answer": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
            "question": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "298",
                "outputTokens": "44",
                "totalTokens": "342",
                "latencyMs": "687"
            },
            "generated_answer": "if n < 2:\n    return y\n\nfor i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n        return y\n\nreturn x",
            "expected_answer": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
            "question": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "358",
                "outputTokens": "62",
                "totalTokens": "420",
                "latencyMs": "579"
            },
            "generated_answer": "sum_of_squares = 0\n\nfor num in lst:\n    if isinstance(num, int) and num > 0 and num % 2 != 0:\n        sum_of_squares += num ** 2\n\nreturn sum_of_squares * 2",
            "expected_answer": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
            "question": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "442",
                "outputTokens": "24",
                "totalTokens": "466",
                "latencyMs": "509"
            },
            "generated_answer": "[\n   abs(guess[i] - game[i]) for i in range(len(game))\n]",
            "expected_answer": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
            "question": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "488",
                "outputTokens": "107",
                "totalTokens": "595",
                "latencyMs": "1627"
            },
            "generated_answer": "\"\"\"\nstrongest_strength = float('-inf')\nstrongest_extension = None\n\nfor extension in extensions:\n    cap_count = sum(1 for char in extension if char.isupper())\n    sm_count = sum(1 for char in extension if char.islower())\n    strength = cap_count - sm_count\n\n    if strength > strongest_strength:\n        strongest_strength = strength\n        strongest_extension = extension\n\nreturn f\"{class_name}.{strongest_extension}\"\n\"\"\"",
            "expected_answer": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
            "question": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "343",
                "outputTokens": "41",
                "totalTokens": "384",
                "latencyMs": "901"
            },
            "generated_answer": "for i in range(len(b)):\n    b_rotated = b[i:] + b[:i]\n    if b_rotated in a:\n        return True\nreturn False",
            "expected_answer": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
            "question": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "278",
                "outputTokens": "65",
                "totalTokens": "343",
                "latencyMs": "550"
            },
            "generated_answer": "count_even = 0\ncount_odd = 0\nfor digit in str(abs(num)):\n    if int(digit) % 2 == 0:\n        count_even += 1\n    else:\n        count_odd += 1\nreturn (count_even, count_odd)",
            "expected_answer": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
            "question": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "318",
                "outputTokens": "162",
                "totalTokens": "480",
                "latencyMs": "1028"
            },
            "generated_answer": "val = [\n    1000, 900, 500, 400,\n    100, 90, 50, 40,\n    10, 9, 5, 4,\n    1\n]\nsym = [\n    \"m\", \"cm\", \"d\", \"cd\",\n    \"c\", \"xc\", \"l\", \"xl\",\n    \"x\", \"ix\", \"v\", \"iv\",\n    \"i\"\n]\nres = []\ni = 0\nwhile number > 0:\n    for _ in range(number // val[i]):\n        res.append(sym[i])\n        number -= val[i]\n    i += 1\nreturn \"\".join(res).lower()",
            "expected_answer": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
            "question": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "316",
                "outputTokens": "29",
                "totalTokens": "345",
                "latencyMs": "486"
            },
            "generated_answer": "sides = sorted([a, b, c])\n\nreturn sides[0]**2 + sides[1]**2 == sides[2]**2",
            "expected_answer": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
            "question": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "326",
                "outputTokens": "91",
                "totalTokens": "417",
                "latencyMs": "696"
            },
            "generated_answer": "max_word = \"\"\nmax_unique_chars = 0\n\nfor word in words:\n    unique_chars = len(set(word))\n    if unique_chars > max_unique_chars or \\\n       (unique_chars == max_unique_chars and word < max_word):\n        max_word = word\n        max_unique_chars = unique_chars\n\nreturn max_word",
            "expected_answer": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
            "question": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "503",
                "outputTokens": "49",
                "totalTokens": "552",
                "latencyMs": "678"
            },
            "generated_answer": "Here is the implementation of the function body:\n\n```\ntotal_eaten = number + min(need, remaining)\nleft_over = remaining - min(need, remaining)\nreturn [total_eaten, left_over]\n```",
            "expected_answer": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
            "question": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "411",
                "outputTokens": "114",
                "totalTokens": "525",
                "latencyMs": "726"
            },
            "generated_answer": "result = operand[0]\n\nfor i in range(len(operator)):\n    if operator[i] == '+':\n        result += operand[i + 1]\n    elif operator[i] == '-':\n        result -= operand[i + 1]\n    elif operator[i] == '*':\n        result *= operand[i + 1]\n    elif operator[i] == '//':\n        result //= operand[i + 1]\n    elif operator[i] == '**':\n        result **= operand[i + 1]\n\nreturn result",
            "expected_answer": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
            "question": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "317",
                "outputTokens": "50",
                "totalTokens": "367",
                "latencyMs": "589"
            },
            "generated_answer": "\"\"\"\n    return \"\".join(c.upper() if c.islower() else c.lower() if c.isupper() else c for c in s[::-1] if c.isalpha() else s[::-1])\n\"\"\"",
            "expected_answer": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
            "question": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "293",
                "outputTokens": "36",
                "totalTokens": "329",
                "latencyMs": "524"
            },
            "generated_answer": "import hashlib\n\nif text:\n    hash_object = hashlib.md5(text.encode())\n    return hash_object.hexdigest()\nelse:\n    return None",
            "expected_answer": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
            "question": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "314",
                "outputTokens": "42",
                "totalTokens": "356",
                "latencyMs": "501"
            },
            "generated_answer": "even_digits = []\n\nfor i in range(a, b+1):\n    if i % 2 == 0:\n        even_digits.append(i)\n\nreturn even_digits",
            "expected_answer": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
            "question": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
            "retrieved_contexts": null
        }
    ],
    "flotorch/anthropic-claude-3-5-sonnet": [
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "2403"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "2046"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
            "question": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1136"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return number % 1.0\n",
            "question": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1645"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1530"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "question": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1586"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
            "question": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1062"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1363"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return [x for x in strings if substring in x]\n",
            "question": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1517"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
            "question": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1660"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
            "question": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1141"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
            "question": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1579"
            },
            "generated_answer": "results = []\nfor i in range(1, len(string) + 1):\n    results.append(string[:i])\nreturn results",
            "expected_answer": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
            "question": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1372"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
            "question": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1393"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    while b:\n        a, b = b, a % b\n    return a\n",
            "question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1739"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
            "question": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1401"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return ' '.join([str(x) for x in range(n + 1)])\n",
            "question": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1404"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return len(set(string.lower()))\n",
            "question": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1429"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1151"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
            "question": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1428"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
            "question": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1579"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
            "question": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "40",
                "totalTokens": "213",
                "latencyMs": "1841"
            },
            "generated_answer": "\n    result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
            "question": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1336"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return [x for x in values if isinstance(x, int)]\n",
            "question": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1485"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return len(string)\n",
            "question": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1276"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
            "question": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1240"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
            "question": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "35",
                "totalTokens": "220",
                "latencyMs": "2496"
            },
            "generated_answer": "\n    if b == 0:\n        return abs(a)\n    return greatest_common_divisor(b, a % b)",
            "expected_answer": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
            "question": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1654"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    return string.swapcase()\n",
            "question": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1581"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return ''.join(strings)\n",
            "question": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1446"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return [x for x in strings if x.startswith(prefix)]\n",
            "question": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1420"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return [e for e in l if e > 0]\n",
            "question": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1652"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
            "question": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1442"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
            "question": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1435"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
            "question": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1450"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return sorted(list(set(l)))\n",
            "question": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1218"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
            "question": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1390"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
            "question": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1977"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
            "question": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1134"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return encode_cyclic(encode_cyclic(s))\n",
            "question": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1348"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
            "question": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1240"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "question": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1868"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return n**2\n",
            "question": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "1347"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    return [(e + 1) for e in l]\n",
            "question": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1419"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
            "question": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1538"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
            "question": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1567"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return a * h / 2.0\n",
            "question": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "1714"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
            "question": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1453"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
            "question": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1331"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
            "question": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1166"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
            "question": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "39",
                "totalTokens": "224",
                "latencyMs": "1498"
            },
            "generated_answer": "```python\na = abs(a)\nb = abs(b)\nwhile b:\n    a, b = b, a % b\nreturn a\n```",
            "expected_answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
            "question": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1818"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
            "question": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "2147"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
            "question": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "2145"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    return x + y\n",
            "question": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1765"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    return set(s0) == set(s1)\n",
            "question": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1254"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
            "question": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1233"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1511"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
            "question": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1612"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
            "question": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "24",
                "totalTokens": "197",
                "latencyMs": "1382"
            },
            "generated_answer": "return [string[:i] for i in range(1, len(string) + 1)]",
            "expected_answer": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
            "question": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "978"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return sum(range(n + 1))\n",
            "question": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1691"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1596"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
            "question": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1514"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
            "question": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1842"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
            "question": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "2102"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
            "question": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1530"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
            "question": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1516"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
            "question": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "1451"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
            "question": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1656"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
            "question": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "23",
                "totalTokens": "210",
                "latencyMs": "1266"
            },
            "generated_answer": "   return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
            "question": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1738"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
            "question": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1455"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
            "question": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1251"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "question": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "44",
                "totalTokens": "217",
                "latencyMs": "1806"
            },
            "generated_answer": "all_prefixes = []\nfor i in range(1, len(string) + 1):\n    all_prefixes.append(string[:i])\nreturn all_prefixes",
            "expected_answer": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
            "question": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "23",
                "totalTokens": "210",
                "latencyMs": "1234"
            },
            "generated_answer": "   return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
            "question": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1871"
            },
            "generated_answer": "   if b == 0:\n        return abs(a)\n    return greatest_common_divisor(b, a % b)",
            "expected_answer": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
            "question": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1459"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
            "question": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1896"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
            "question": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "25",
                "totalTokens": "198",
                "latencyMs": "1106"
            },
            "generated_answer": "   return [string[:i] for i in range(1, len(string) + 1)]",
            "expected_answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
            "question": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "40",
                "totalTokens": "213",
                "latencyMs": "1479"
            },
            "generated_answer": "prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
            "question": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1499"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
            "question": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1364"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
            "question": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1319"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
            "question": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1433"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
            "question": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1319"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "question": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "2077"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
            "question": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1558"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
            "question": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1124"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
            "question": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1614"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
            "question": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1350"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
            "question": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1320"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
            "question": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1213"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
            "question": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1234"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
            "question": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "2015"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
            "question": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1754"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
            "question": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1417"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
            "question": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1562"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    return abs(a % 10) * abs(b % 10)\n",
            "question": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1845"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
            "question": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1508"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
            "question": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1831"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    return [n + 2*i for i in range(n)]\n",
            "question": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1710"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
            "question": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "2077"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
            "question": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1739"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
            "question": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1657"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
            "question": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1285"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
            "question": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "1398"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
            "question": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1292"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
            "question": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1790"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
            "question": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1416"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
            "question": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1318"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
            "question": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1438"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
            "question": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1515"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
            "question": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1127"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
            "question": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1757"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
            "question": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1405"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
            "question": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1473"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
            "question": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1471"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
            "question": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1365"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
            "question": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1807"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
            "question": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1566"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
            "question": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1272"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
            "question": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1704"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
            "question": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "65",
                "totalTokens": "238",
                "latencyMs": "1938"
            },
            "generated_answer": "   # Create empty list to store prefixes\n    prefixes = []\n    \n    # Add each prefix from shortest to longest\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n        \n    return prefixes",
            "expected_answer": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
            "question": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1635"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
            "question": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1750"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
            "question": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1549"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
            "question": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1316"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "question": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1145"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
            "question": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1312"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
            "question": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "2194"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
            "question": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "997"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
            "question": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1657"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
            "question": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "1356"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
            "question": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1467"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
            "question": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1389"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
            "question": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1594"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
            "question": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1528"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
            "question": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "2088"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    return n%2 == 0 and n >= 8\n",
            "question": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1555"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
            "question": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1472"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
            "question": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1349"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
            "question": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1510"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
            "question": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "41",
                "totalTokens": "214",
                "latencyMs": "1476"
            },
            "generated_answer": "   prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes",
            "expected_answer": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
            "question": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1339"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
            "question": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "44",
                "totalTokens": "217",
                "latencyMs": "1796"
            },
            "generated_answer": "   prefix_list = []\n    for i in range(1, len(string) + 1):\n        prefix_list.append(string[:i])\n    return prefix_list",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
            "question": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1999"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
            "question": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "40",
                "totalTokens": "225",
                "latencyMs": "2033"
            },
            "generated_answer": "```python\nif b == 0:\n    return abs(a)\nelse:\n    return greatest_common_divisor(b, a % b)\n```",
            "expected_answer": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
            "question": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "986"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
            "question": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "1218"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
            "question": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1390"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
            "question": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "26",
                "totalTokens": "211",
                "latencyMs": "1933"
            },
            "generated_answer": "while b != 0:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
            "question": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1645"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
            "question": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1691"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
            "question": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1369"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
            "question": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1912"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
            "question": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1446"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
            "question": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1459"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
            "question": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "43",
                "totalTokens": "216",
                "latencyMs": "1505"
            },
            "generated_answer": "prefix_list = []\n    for i in range(1, len(string) + 1):\n        prefix_list.append(string[:i])\n    return prefix_list",
            "expected_answer": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
            "question": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1618"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
            "question": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1736"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
            "question": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1748"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
            "question": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "20",
                "totalTokens": "205",
                "latencyMs": "1630"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn a",
            "expected_answer": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
            "question": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1448"
            },
            "generated_answer": "   result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
            "question": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
            "retrieved_contexts": null
        }
    ],
    "flotorch/us-anthropic-claude-3-5-haiku": [
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1563"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "36",
                "totalTokens": "221",
                "latencyMs": "1993"
            },
            "generated_answer": "# Euclidean algorithm for finding GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n",
            "question": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1246"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    return number % 1.0\n",
            "question": "\n\ndef truncate_number(number: float) -> float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    >>> truncate_number(3.5)\n    0.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1408"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n",
            "question": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1270"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n",
            "question": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1554"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n",
            "question": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\" Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n    >>> intersperse([], 4)\n    []\n    >>> intersperse([1, 2, 3], 4)\n    [1, 4, 2, 4, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "1517"
            },
            "generated_answer": "# Implement Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "37",
                "totalTokens": "210",
                "latencyMs": "1292"
            },
            "generated_answer": "result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    return [x for x in strings if substring in x]\n",
            "question": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1428"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return sum_value, prod_value\n",
            "question": "from typing import List, Tuple\n\n\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\" For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n    >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "28",
                "totalTokens": "215",
                "latencyMs": "1258"
            },
            "generated_answer": "```python\n    return ' '.join(str(num) for num in range(n + 1))\n```",
            "expected_answer": "    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n",
            "question": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1626"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n",
            "question": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1460"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n",
            "question": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    \"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1263"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if not strings:\n        return None\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n",
            "question": "from typing import List, Optional\n\n\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\" Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b', 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1453"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    while b:\n        a, b = b, a % b\n    return a\n",
            "question": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\" Return a greatest common divisor of two integers a and b\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1652"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n",
            "question": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1483"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    return ' '.join([str(x) for x in range(n + 1)])\n",
            "question": "\n\ndef string_sequence(n: int) -> str:\n    \"\"\" Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1221"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    return len(set(string.lower()))\n",
            "question": "\n\ndef count_distinct_characters(string: str) -> int:\n    \"\"\" Given a string, find out how many distinct characters (regardless of case) does it consist of\n    >>> count_distinct_characters('xyzXYZ')\n    3\n    >>> count_distinct_characters('Jerry')\n    4\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1216"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n",
            "question": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1695"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n",
            "question": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    >>> how_many_times('', 'a')\n    0\n    >>> how_many_times('aaa', 'a')\n    3\n    >>> how_many_times('aaaa', 'aa')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "35",
                "totalTokens": "220",
                "latencyMs": "1671"
            },
            "generated_answer": "# Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n",
            "question": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    \"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1670"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return closest_pair\n",
            "question": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\" From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n    (2.0, 2.2)\n    >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n    (2.0, 2.0)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1740"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n",
            "question": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\" Given list of numbers (of at least two elements), apply a linear transform to that list,\n    such that the smallest number will become 0 and the largest will become 1\n    >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n    [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1972"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    return [x for x in values if isinstance(x, int)]\n",
            "question": "from typing import List, Any\n\n\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n    >>> filter_integers(['a', 3.14, 5])\n    [5]\n    >>> filter_integers([1, 2, 3, 'abc', {}, []])\n    [1, 2, 3]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1369"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    return len(string)\n",
            "question": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1261"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n",
            "question": "\n\ndef largest_divisor(n: int) -> int:\n    \"\"\" For a given number n, find the largest number that divides n evenly, smaller than n\n    >>> largest_divisor(15)\n    5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1564"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    import math\n    fact = []\n    i = 2\n    while i <= int(math.sqrt(n) + 1):\n        if n % i == 0:\n            fact.append(i)\n            n //= i\n        else:\n            i += 1\n\n    if n > 1:\n        fact.append(n)\n    return fact\n",
            "question": "from typing import List\n\n\ndef factorize(n: int) -> List[int]:\n    \"\"\" Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n    Input number should be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1533"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n",
            "question": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\" From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n    >>> remove_duplicates([1, 2, 3, 2, 4])\n    [1, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1410"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return string.swapcase()\n",
            "question": "\n\ndef flip_case(string: str) -> str:\n    \"\"\" For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n    >>> flip_case('Hello')\n    'hELLO'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1385"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    return ''.join(strings)\n",
            "question": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n    >>> concatenate([])\n    ''\n    >>> concatenate(['a', 'b', 'c'])\n    'abc'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1321"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    return [x for x in strings if x.startswith(prefix)]\n",
            "question": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n    >>> filter_by_prefix([], 'a')\n    []\n    >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ['abc', 'array']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1351"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return [e for e in l if e > 0]\n",
            "question": "\n\ndef get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n    >>> get_positive([-1, 2, -4, 5, 6])\n    [2, 5, 6]\n    >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "39",
                "totalTokens": "224",
                "latencyMs": "1623"
            },
            "generated_answer": "# Euclidean algorithm to find the greatest common divisor\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n",
            "question": "\n\ndef is_prime(n):\n    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1273"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n",
            "question": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    \"\"\" xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1582"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    l = list(l)\n    l[::3] = sorted(l[::3])\n    return l\n",
            "question": "\n\ndef sort_third(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n    to the values of the corresponding indicies of l, but sorted.\n    >>> sort_third([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n    [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1397"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    return sorted(list(set(l)))\n",
            "question": "\n\ndef unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1532"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n",
            "question": "\n\ndef max_element(l: list):\n    \"\"\"Return maximum element in the list.\n    >>> max_element([1, 2, 3])\n    3\n    >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n    123\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "2373"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n",
            "question": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "33",
                "totalTokens": "220",
                "latencyMs": "1645"
            },
            "generated_answer": "if n < 0:\n    return ''\nreturn ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n",
            "question": "\n\ndef sort_even(l: list):\n    \"\"\"This function takes a list l and returns a list l' such that\n    l' is identical to l in the odd indicies, while its values at the even indicies are equal\n    to the values of the even indicies of l, but sorted.\n    >>> sort_even([1, 2, 3])\n    [1, 2, 3]\n    >>> sort_even([5, 6, 3, 4])\n    [3, 6, 5, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1612"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return encode_cyclic(encode_cyclic(s))\n",
            "question": "\n\ndef encode_cyclic(s: str):\n    \"\"\"\n    returns encoded string by cycling groups of three characters.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[1:] + group[0]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)\n\n\ndef decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1881"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n",
            "question": "\n\ndef prime_fib(n: int):\n    \"\"\"\n    prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n    >>> prime_fib(1)\n    2\n    >>> prime_fib(2)\n    3\n    >>> prime_fib(3)\n    5\n    >>> prime_fib(4)\n    13\n    >>> prime_fib(5)\n    89\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1228"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n",
            "question": "\n\ndef triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1284"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    return n**2\n",
            "question": "\n\ndef car_race_collision(n: int):\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1786"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return [(e + 1) for e in l]\n",
            "question": "\n\ndef incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1, 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "2077"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n",
            "question": "\n\ndef pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    >>> pairs_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> pairs_sum_to_zero([1, 3, -2, 1])\n    False\n    >>> pairs_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n    True\n    >>> pairs_sum_to_zero([1])\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "2129"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n",
            "question": "\n\ndef change_base(x: int, base: int):\n    \"\"\"Change numerical base of input number x to base.\n    return string representation after the conversion.\n    base numbers are less than 10.\n    >>> change_base(8, 3)\n    '22'\n    >>> change_base(8, 2)\n    '1000'\n    >>> change_base(7, 2)\n    '111'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1134"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    return a * h / 2.0\n",
            "question": "\n\ndef triangle_area(a, h):\n    \"\"\"Given length of a side and high return area for a triangle.\n    >>> triangle_area(5, 3)\n    7.5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1697"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n",
            "question": "\n\ndef fib4(n: int):\n    \"\"\"The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n    Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n    >>> fib4(5)\n    4\n    >>> fib4(6)\n    8\n    >>> fib4(7)\n    14\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "28",
                "totalTokens": "215",
                "latencyMs": "2500"
            },
            "generated_answer": "```python\n    return ' '.join(str(i) for i in range(n + 1))\n```",
            "expected_answer": "    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n",
            "question": "\n\ndef median(l: list):\n    \"\"\"Return median of elements in the list l.\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "38",
                "totalTokens": "223",
                "latencyMs": "1530"
            },
            "generated_answer": "# Euclidean algorithm for finding greatest common divisor\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n",
            "question": "\n\ndef is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    >>> is_palindrome('')\n    True\n    >>> is_palindrome('aba')\n    True\n    >>> is_palindrome('aaaaa')\n    True\n    >>> is_palindrome('zbcd')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "2091"
            },
            "generated_answer": "# Euclidean algorithm implementation\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n",
            "question": "\n\ndef modp(n: int, p: int):\n    \"\"\"Return 2^n modulo p (be aware of numerics).\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1900"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    return \"\".join([chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n",
            "question": "\n\ndef encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    return \"\".join([chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\")) for ch in s])\n\n\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "1696"
            },
            "generated_answer": "# Use Euclidean algorithm to find GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n",
            "question": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "3852"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    for e in l:\n        if e >= t:\n            return False\n    return True\n",
            "question": "\n\ndef below_threshold(l: list, t: int):\n    \"\"\"Return True if all numbers in the list l are below threshold t.\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1126"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    return x + y\n",
            "question": "\n\ndef add(x: int, y: int):\n    \"\"\"Add two numbers x and y\n    >>> add(2, 3)\n    5\n    >>> add(5, 7)\n    12\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1627"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return set(s0) == set(s1)\n",
            "question": "\n\ndef same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd', 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1849"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n",
            "question": "\n\ndef fib(n: int):\n    \"\"\"Return n-th Fibonacci number.\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1638"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"<\" and \">\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"<\")\n    False\n    >>> correct_bracketing(\"<>\")\n    True\n    >>> correct_bracketing(\"<<><>>\")\n    True\n    >>> correct_bracketing(\"><<>\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "1897"
            },
            "generated_answer": "# Implement Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n",
            "question": "\n\ndef monotonic(l: list):\n    \"\"\"Return True is list elements are monotonically increasing or decreasing.\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1514"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n",
            "question": "\n\ndef common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n    >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n    [1, 5, 653]\n    >>> common([5, 3, 2, 8], [3, 2])\n    [2, 3]\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "23",
                "totalTokens": "196",
                "latencyMs": "1792"
            },
            "generated_answer": "[\n    string[:i+1] for i in range(len(string))\n]",
            "expected_answer": "    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n",
            "question": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1830"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    return sum(range(n + 1))\n",
            "question": "\n\ndef sum_to_n(n: int):\n    \"\"\"sum_to_n is a function that sums numbers from 1 to n.\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "40",
                "totalTokens": "225",
                "latencyMs": "1645"
            },
            "generated_answer": "# Use Euclidean algorithm to find GCD\n    while b != 0:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n",
            "question": "\n\ndef correct_bracketing(brackets: str):\n    \"\"\" brackets is a string of \"(\" and \")\".\n    return True if every opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"(\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"(()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "2119"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    return [(i * x) for i, x in enumerate(xs)][1:]\n",
            "question": "\n\ndef derivative(xs: list):\n    \"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "2340"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n",
            "question": "\n\ndef fibfib(n: int):\n    \"\"\"The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n    Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n    >>> fibfib(1)\n    0\n    >>> fibfib(5)\n    4\n    >>> fibfib(8)\n    24\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "21",
                "totalTokens": "208",
                "latencyMs": "2067"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n+1))",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n",
            "question": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    \"\"\"Write a function vowels_count which takes a string representing\n    a word as input and returns the number of vowels in the string.\n    Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n    vowel, but only when it is at the end of the given word.\n\n    Example:\n    >>> vowels_count(\"abcde\")\n    2\n    >>> vowels_count(\"ACEDY\")\n    3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1457"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n",
            "question": "\ndef circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    >>> circular_shift(12, 1)\n    \"21\"\n    >>> circular_shift(12, 2)\n    \"12\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1478"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n",
            "question": "\ndef digitSum(s):\n    \"\"\"Task\n    Write a function that takes a string as input and returns the sum of the upper characters only'\n    ASCII codes.\n\n    Examples:\n        digitSum(\"\") => 0\n        digitSum(\"abAB\") => 131\n        digitSum(\"abcCd\") => 67\n        digitSum(\"helloE\") => 69\n        digitSum(\"woArBld\") => 131\n        digitSum(\"aAaaaXa\") => 153\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "2002"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n",
            "question": "\ndef fruit_distribution(s,n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "24",
                "totalTokens": "197",
                "latencyMs": "2133"
            },
            "generated_answer": "return [string[:i] for i in range(1, len(string) + 1)]",
            "expected_answer": "    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n",
            "question": "\ndef pluck(arr):\n    \"\"\"\n    \"Given an array representing a branch of a tree that has non-negative integer nodes\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "119",
                "totalTokens": "304",
                "latencyMs": "3925"
            },
            "generated_answer": "```python\n    # Use Euclidean algorithm to find GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)\n```\n\nThe implementation uses the efficient Euclidean algorithm to compute the greatest common divisor. It repeatedly replaces `a` with `b` and `b` with the remainder of `a` divided by `b` until `b` becomes zero. The `abs()` ensures a positive result for signed integers. The algorithm works for both positive and negative integers.",
            "expected_answer": "    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n",
            "question": "\ndef search(lst):\n    '''\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "2219"
            },
            "generated_answer": "# Implementing Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n",
            "question": "\ndef strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1454"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n",
            "question": "\ndef triangle_area(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return the area of\n    the triangle rounded to 2 decimal points if the three sides form a valid triangle. \n    Otherwise return -1\n    Three sides make a valid triangle when the sum of any two sides is greater \n    than the third side.\n    Example:\n    triangle_area(3, 4, 5) == 6.00\n    triangle_area(1, 2, 10) == -1\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "1358"
            },
            "generated_answer": "# Implementation of Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n",
            "question": "\ndef will_it_fly(q,w):\n    '''\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) ➞ False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) ➞ False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) ➞ True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) ➞ True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "74",
                "totalTokens": "259",
                "latencyMs": "2485"
            },
            "generated_answer": "# Implement Euclidean algorithm for finding GCD\n    # Use absolute values to handle negative inputs\n    a, b = abs(a), abs(b)\n    \n    # Use iterative Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    \n    return a",
            "expected_answer": "    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n",
            "question": "\ndef smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "2730"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n",
            "question": "\ndef total_match(lst1, lst2):\n    '''\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    total_match([], []) ➞ []\n    total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n    total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n    total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n    total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1695"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n",
            "question": "\ndef is_multiply_prime(a):\n    \"\"\"Write a function that returns true if the given number is the multiplication of 3 prime numbers\n    and false otherwise.\n    Knowing that (a) is less then 100. \n    Example:\n    is_multiply_prime(30) == True\n    30 = 2 * 3 * 5\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1868"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n",
            "question": "\ndef is_simple_power(x, n):\n    \"\"\"Your task is to write a function that returns true if a number x is a simple\n    power of n and false in other cases.\n    x is a simple power of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2, 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) => false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "50",
                "totalTokens": "235",
                "latencyMs": "3041"
            },
            "generated_answer": "# Using Euclidean algorithm\n    a, b = abs(a), abs(b)  # Ensure positive inputs\n    while b:\n        a, b = b, a % b\n    return a",
            "expected_answer": "    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n",
            "question": "\ndef iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "2523"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n",
            "question": "\ndef hex_key(num):\n    \"\"\"You have been tasked to write a function that receives \n    a hexadecimal number as a string and counts the number of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural number \n    greater than 1 that is not a product of two smaller natural numbers).\n    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n    Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal 13).\n    Note: you may assume the input is always correct or empty string, \n    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    For num = \"AB\" the output should be 1.\n    For num = \"1077E\" the output should be 2.\n    For num = \"ABED1A33\" the output should be 4.\n    For num = \"123456789ABCDEF0\" the output should be 6.\n    For num = \"2020\" the output should be 2.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1457"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    return \"db\" + bin(decimal)[2:] + \"db\"\n",
            "question": "\ndef decimal_to_binary(decimal):\n    \"\"\"You will be given a number in decimal form and your task is to convert it to\n    binary format. The function should return a string, with each character representing a binary\n    number. Each character in the string will be '0' or '1'.\n\n    There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n    The extra characters are there to help with the format.\n\n    Examples:\n    decimal_to_binary(15)   # returns \"db1111db\"\n    decimal_to_binary(32)   # returns \"db100000db\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "2391"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n",
            "question": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1592"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n",
            "question": "\ndef numerical_letter_grade(grades):\n    \"\"\"It is the last week of the semester and the teacher has to give the grades\n    to students. The teacher has been making her own algorithm for grading.\n    The only problem is, she has lost the code she used for grading.\n    She has given you a list of GPAs for some students and you have to write \n    a function that can output a list of letter grades using the following table:\n             GPA       |    Letter grade\n              4.0                A+\n            > 3.7                A \n            > 3.3                A- \n            > 3.0                B+\n            > 2.7                B \n            > 2.3                B-\n            > 2.0                C+\n            > 1.7                C\n            > 1.3                C-\n            > 1.0                D+ \n            > 0.7                D \n            > 0.0                D-\n              0.0                E\n    \n\n    Example:\n    grade_equation([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "37",
                "totalTokens": "210",
                "latencyMs": "3035"
            },
            "generated_answer": "result = []\n    for i in range(1, len(string) + 1):\n        result.append(string[:i])\n    return result",
            "expected_answer": "    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n",
            "question": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "2444"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n",
            "question": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "2369"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    return bin(sum(int(i) for i in str(N)))[2:]\n",
            "question": "\ndef solve(N):\n    \"\"\"Given a positive integer N, return the total sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For N = 150, the sum of digits will be 6 the output should be \"110\".\n        For N = 147, the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints: 0 ≤ N ≤ 10000.\n    Output:\n         a string of binary number\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "53",
                "totalTokens": "238",
                "latencyMs": "3308"
            },
            "generated_answer": "# Implement Euclidean algorithm for GCD\n    a, b = abs(a), abs(b)  # Handle negative inputs\n    while b:\n        a, b = b, a % b\n    return a",
            "expected_answer": "    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n",
            "question": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "98",
                "totalTokens": "283",
                "latencyMs": "3237"
            },
            "generated_answer": "```python\n    # Handle base cases where either number is zero\n    if a == 0:\n        return abs(b)\n    if b == 0:\n        return abs(a)\n    \n    # Use Euclidean algorithm with absolute values\n    a, b = abs(a), abs(b)\n    while b:\n        a, b = b, a % b\n    \n    return a\n```",
            "expected_answer": "    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n",
            "question": "\ndef anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1331"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    coords = [(i, j) for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n",
            "question": "\ndef get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "3585"
            },
            "generated_answer": "return ' '.join(str(x) for x in range(n + 1))",
            "expected_answer": "    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n",
            "question": "\ndef sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "2269"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n",
            "question": "\ndef encrypt(s):\n    \"\"\"Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n    For example:\n    encrypt('hi') returns 'lm'\n    encrypt('asdfghjkl') returns 'ewhjklnop'\n    encrypt('gf') returns 'kj'\n    encrypt('et') returns 'ix'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "2316"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    lst = sorted(set(lst))\n    return None if len(lst) < 2 else lst[1]\n",
            "question": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1684"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n",
            "question": "\ndef is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1184"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    \n    if isinstance(x,int) and isinstance(y,int) and isinstance(z,int):\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False\n",
            "question": "\ndef any_int(x, y, z):\n    '''\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n    \n    Examples\n    any_int(5, 2, 7) ➞ True\n    \n    any_int(3, 2, 2) ➞ False\n\n    any_int(3, -2, 1) ➞ True\n    \n    any_int(3.6, -2.2, 2) ➞ False\n  \n\n    \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1493"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n",
            "question": "\ndef encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1473"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n",
            "question": "\n\ndef skjkasdkd(lst):\n    \"\"\"You are given a list of integers.\n    You need to find the largest prime value and return the sum of its digits.\n\n    Examples:\n    For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n    For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n    For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n    For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n    For lst = [0,81,12,3,1,21] the output should be 3\n    For lst = [0,8,1,2,1,7] the output should be 7\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1704"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n",
            "question": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1787"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n",
            "question": "\ndef count_up_to(n):\n    \"\"\"Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n    for example:\n    count_up_to(5) => [2,3]\n    count_up_to(11) => [2,3,5,7]\n    count_up_to(0) => []\n    count_up_to(20) => [2,3,5,7,11,13,17,19]\n    count_up_to(1) => []\n    count_up_to(18) => [2,3,5,7,11,13,17]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "28",
                "totalTokens": "215",
                "latencyMs": "1831"
            },
            "generated_answer": "```python\n    return ' '.join(str(num) for num in range(n + 1))\n```",
            "expected_answer": "    return abs(a % 10) * abs(b % 10)\n",
            "question": "\ndef multiply(a, b):\n    \"\"\"Complete the function that takes two integers and returns \n    the product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1439"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n",
            "question": "\ndef count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1407"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n",
            "question": "\ndef closest_integer(value):\n    '''\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "35",
                "totalTokens": "208",
                "latencyMs": "1590"
            },
            "generated_answer": "result = []\nfor i in range(1, len(string) + 1):\n    result.append(string[:i])\nreturn result",
            "expected_answer": "    return [n + 2*i for i in range(n)]\n",
            "question": "\ndef make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "1993"
            },
            "generated_answer": "# Implement Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n",
            "question": "\ndef words_string(s):\n    \"\"\"\n    You will be given a string of words separated by commas or spaces. Your task is\n    to split the string into words and return an array of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "2887"
            },
            "generated_answer": "# Implementing Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n",
            "question": "\ndef choose_num(x, y):\n    \"\"\"This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    For example:\n    choose_num(12, 15) = 14\n    choose_num(13, 12) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1607"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    if m < n:\n        return -1\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n",
            "question": "\ndef rounded_avg(n, m):\n    \"\"\"You are given two positive integers n and m, and your task is to compute the\n    average of the integers from n through m (including n and m). \n    Round the answer to the nearest integer and convert that to binary.\n    If n is greater than m, return -1.\n    Example:\n    rounded_avg(1, 5) => \"0b11\"\n    rounded_avg(7, 5) => -1\n    rounded_avg(10, 20) => \"0b1111\"\n    rounded_avg(20, 33) => \"0b11010\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1127"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n",
            "question": "\ndef unique_digits(x):\n    \"\"\"Given a list of positive integers x. return a sorted list of all \n    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422, 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1373"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n",
            "question": "\ndef by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1220"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n",
            "question": "\ndef f(n):\n    \"\"\" Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n    Example:\n    f(5) == [1, 2, 6, 24, 15]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1542"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return (even_palindrome_count, odd_palindrome_count)\n",
            "question": "\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1320"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n",
            "question": "\ndef count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    >>> count_nums([]) == 0\n    >>> count_nums([-1, 11, -11]) == 1\n    >>> count_nums([1, 1, 2]) == 3\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1782"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n",
            "question": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1464"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n",
            "question": "\ndef exchange(lst1, lst2):\n    \"\"\"In this problem, you will implement a function that takes two lists of numbers,\n    and determines whether it is possible to perform an exchange of elements\n    between them to make lst1 a list of only even numbers.\n    There is no limit on the number of exchanged elements between lst1 and lst2.\n    If it is possible to exchange elements between the lst1 and lst2 to make\n    all the elements of lst1 to be even, return \"YES\".\n    Otherwise, return \"NO\".\n    For example:\n    exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n    exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n    It is assumed that the input lists will be non-empty.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1238"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n",
            "question": "\ndef histogram(test):\n    \"\"\"Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "39",
                "totalTokens": "224",
                "latencyMs": "1422"
            },
            "generated_answer": "# Use Euclidean algorithm to find greatest common divisor\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    s = ''.join([char for char in s if char not in c])\n    return (s,s[::-1] == s)\n",
            "question": "\ndef reverse_delete(s,c):\n    \"\"\"Task\n    We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n    then check if the result string is palindrome.\n    A string is called palindrome if it reads the same backward as forward.\n    You should return a tuple containing the result string and True/False for the check.\n    Example\n    For s = \"abcde\", c = \"ae\", the result should be ('bcd',False)\n    For s = \"abcdef\", c = \"b\"  the result should be ('acdef',False)\n    For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',True)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "38",
                "totalTokens": "211",
                "latencyMs": "1197"
            },
            "generated_answer": "prefixes = []\nfor i in range(1, len(string) + 1):\n    prefixes.append(string[:i])\nreturn prefixes",
            "expected_answer": "    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n",
            "question": "\ndef odd_count(lst):\n    \"\"\"Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    >>> odd_count(['1234567'])\n    [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n    >>> odd_count(['3',\"11111111\"])\n    [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n     \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1575"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n",
            "question": "\ndef minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1482"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n",
            "question": "\ndef max_fill(grid, capacity):\n    import math\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1140"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n",
            "question": "\ndef sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1489"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n",
            "question": "\ndef select_words(s, n):\n    \"\"\"Given a string s and a natural number n, you have been tasked to implement \n    a function that returns a list of all words from string s that contain exactly \n    n consonants, in order these words appear in the string s.\n    If the string s is empty then the function should return an empty list.\n    Note: you may assume the input string contains only letters and spaces.\n    Examples:\n    select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n    select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\", \"lamb\"]\n    select_words(\"simple white space\", 2) ==> []\n    select_words(\"Hello world\", 4) ==> [\"world\"]\n    select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1428"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n",
            "question": "\ndef get_closest_vowel(word):\n    \"\"\"You are given a word. Your task is to find the closest vowel that stands between \n    two consonants from the right side of the word (case sensitive).\n    \n    Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n    find any vowel met the above condition. \n\n    You may assume that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1012"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n",
            "question": "\ndef match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1459"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans\n",
            "question": "\ndef maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1099"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])\n",
            "question": "\ndef solution(lst):\n    \"\"\"Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n    \n\n    Examples\n    solution([5, 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13, 24, 321]) ==>0\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "46",
                "totalTokens": "219",
                "latencyMs": "1672"
            },
            "generated_answer": "```python\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes\n```",
            "expected_answer": "    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n",
            "question": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1242"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n",
            "question": "\ndef get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "50",
                "totalTokens": "235",
                "latencyMs": "1922"
            },
            "generated_answer": "# Using the Euclidean algorithm\n    a, b = abs(a), abs(b)  # Handle negative inputs\n    while b:\n        a, b = b, a % b\n    return a",
            "expected_answer": "    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n",
            "question": "\ndef valid_date(date):\n    \"\"\"You have to write a function which validates a given date string and\n    returns True if the date is valid otherwise False.\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    for example: \n    valid_date('03-11-2000') => True\n\n    valid_date('15-01-2012') => False\n\n    valid_date('04-0-2040') => False\n\n    valid_date('06-04-2020') => True\n\n    valid_date('06/04/2020') => False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1063"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return len([i for i in txt if i.islower() and ord(i)%2 == 0])\n",
            "question": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1383"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n",
            "question": "\ndef is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) ➞ True\n    is_sorted([1, 2, 3, 4, 5]) ➞ True\n    is_sorted([1, 3, 2, 4, 5]) ➞ False\n    is_sorted([1, 2, 3, 4, 5, 6]) ➞ True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ False\n    is_sorted([1, 2, 2, 3, 3, 4]) ➞ True\n    is_sorted([1, 2, 2, 2, 3, 4]) ➞ False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "2116"
            },
            "generated_answer": "# Implementing Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n",
            "question": "\ndef intersection(interval1, interval2):\n    \"\"\"You are given two intervals,\n    where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n    The given intervals are closed which means that the interval (start, end)\n    includes both start and end.\n    For each given interval, it is assumed that its start is less or equal its end.\n    Your task is to determine whether the length of intersection of these two \n    intervals is a prime number.\n    Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n    which its length is 1, which not a prime number.\n    If the length of the intersection is a prime number, return \"YES\",\n    otherwise, return \"NO\".\n    If the two intervals don't intersect, return \"NO\".\n\n\n    [input/output] samples:\n    intersection((1, 2), (2, 3)) ==> \"NO\"\n    intersection((-1, 1), (0, 4)) ==> \"NO\"\n    intersection((-3, -1), (-5, 5)) ==> \"YES\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1111"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    if not arr: return None\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])\n",
            "question": "\ndef prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1466"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n",
            "question": "\ndef minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "35",
                "totalTokens": "220",
                "latencyMs": "2073"
            },
            "generated_answer": "# Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n",
            "question": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1528"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n",
            "question": "\ndef digits(n):\n    \"\"\"Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n    For example:\n    digits(1)  == 1\n    digits(4)  == 0\n    digits(235) == 15\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1689"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n",
            "question": "\ndef is_nested(string):\n    '''\n    Create a function that takes a string as input which contains only square brackets.\n    The function should return True if and only if there is a valid subsequence of brackets \n    where at least one bracket in the subsequence is nested.\n\n    is_nested('[[]]') ➞ True\n    is_nested('[]]]]]]][[[[[]') ➞ False\n    is_nested('[][]') ➞ False\n    is_nested('[]') ➞ False\n    is_nested('[[][]]') ➞ True\n    is_nested('[[]][[') ➞ True\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1391"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n",
            "question": "\n\ndef sum_squares(lst):\n    \"\"\"You are given a list of numbers.\n    You need to return the sum of squared numbers in the given list,\n    round each element in the list to the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7] the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1743"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": " \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n",
            "question": "\ndef check_if_last_char_is_a_letter(txt):\n    '''\n    Create a function that returns True if the last character\n    of a given string is an alphabetical character and is not\n    a part of a word, and False otherwise.\n    Note: \"word\" is a group of characters separated by space.\n\n    Examples:\n    check_if_last_char_is_a_letter(\"apple pie\") ➞ False\n    check_if_last_char_is_a_letter(\"apple pi e\") ➞ True\n    check_if_last_char_is_a_letter(\"apple pi e \") ➞ False\n    check_if_last_char_is_a_letter(\"\") ➞ False \n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "40",
                "totalTokens": "225",
                "latencyMs": "1963"
            },
            "generated_answer": "# Use Euclidean algorithm to find the greatest common divisor\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n",
            "question": "\ndef can_arrange(arr):\n    \"\"\"Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1613"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return (max(smallest) if smallest else None, min(largest) if largest else None)\n",
            "question": "\ndef largest_smallest_integers(lst):\n    '''\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0]) == (None, None)\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1393"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    temp_a, temp_b = a, b\n    if isinstance(temp_a, str): temp_a = temp_a.replace(',','.')\n    if isinstance(temp_b, str): temp_b = temp_b.replace(',','.')\n    if float(temp_a) == float(temp_b): return None\n    return a if float(temp_a) > float(temp_b) else b \n",
            "question": "\ndef compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) ➞ 2.5\n    compare_one(1, \"2,3\") ➞ \"2,3\"\n    compare_one(\"5,1\", \"6\") ➞ \"6\"\n    compare_one(\"1\", 1) ➞ None\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1383"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    return n%2 == 0 and n >= 8\n",
            "question": "\ndef is_equal_to_sum_even(n):\n    \"\"\"Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n    Example\n    is_equal_to_sum_even(4) == False\n    is_equal_to_sum_even(6) == False\n    is_equal_to_sum_even(8) == True\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1632"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n",
            "question": "\ndef special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1023"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n",
            "question": "\ndef fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1575"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n",
            "question": "\ndef file_name_check(file_name):\n    \"\"\"Create a function which takes a string representing a file's name, and returns\n    'Yes' if the the file's name is valid, and returns 'No' otherwise.\n    A file's name is considered to be valid if and only if all the following conditions \n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from \n    the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n    Examples:\n    file_name_check(\"example.txt\") # => 'Yes'\n    file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1603"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n",
            "question": "\n\n\ndef sum_squares(lst):\n    \"\"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1865"
            },
            "generated_answer": "```python\n    return [string[:i+1] for i in range(len(string))]\n```",
            "expected_answer": "    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n",
            "question": "\ndef words_in_sentence(sentence):\n    \"\"\"\n    You are given a string representing a sentence,\n    the sentence contains some words separated by a space,\n    and you have to return a string that contains the words from the original sentence,\n    whose lengths are prime numbers,\n    the order of the words in the new string should be the same as the original one.\n\n    Example 1:\n        Input: sentence = \"This is a test\"\n        Output: \"is\"\n\n    Example 2:\n        Input: sentence = \"lets go for swimming\"\n        Output: \"go for\"\n\n    Constraints:\n        * 1 <= len(sentence) <= 100\n        * sentence contains only letters\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "38",
                "totalTokens": "223",
                "latencyMs": "1910"
            },
            "generated_answer": "# Implement Euclidean algorithm for finding GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n",
            "question": "\ndef simplify(x, n):\n    \"\"\"Your task is to implement a function that will simplify the expression\n    x * n. The function returns True if x * n evaluates to a whole number and False\n    otherwise. Both x and n, are string representation of a fraction, and have the following format,\n    <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n    You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n    simplify(\"1/5\", \"5/1\") = True\n    simplify(\"1/6\", \"2/1\") = False\n    simplify(\"7/10\", \"10/2\") = False\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1249"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n",
            "question": "\ndef order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1355"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n",
            "question": "\ndef specialFilter(nums):\n    \"\"\"Write a function that takes an array of numbers as input and returns \n    the number of elements in the array that are greater than 10 and both \n    first and last digits of a number are odd (1, 3, 5, 7, 9).\n    For example:\n    specialFilter([15, -73, 14, -15]) => 1 \n    specialFilter([33, -2, -3, 45, 21, 109]) => 2\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1373"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n",
            "question": "\ndef get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n        For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n        Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1385"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return ()\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return (planet_names[planet1_index + 1: planet2_index])\n    else:\n        return (planet_names[planet2_index + 1 : planet1_index])\n",
            "question": "\ndef bf(planet1, planet2):\n    '''\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n    Examples\n    bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n    bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n    bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1686"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n",
            "question": "\ndef sorted_list_sum(lst):\n    \"\"\"Write a function that accepts a list of strings as a parameter,\n    deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order,\n    The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates.\n    The order of the list should be ascending by length of each word, and you\n    should return the list sorted by that rule.\n    If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n    You may assume that all words will have the same length.\n    For example:\n    assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n    assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "27",
                "totalTokens": "200",
                "latencyMs": "1127"
            },
            "generated_answer": "prefixes = [string[:i+1] for i in range(len(string))]\nreturn prefixes",
            "expected_answer": "    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n",
            "question": "\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Examples:\n    for x_or_y(7, 34, 12) == 34\n    for x_or_y(15, 8, 5) == 5\n    \n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "33",
                "totalTokens": "218",
                "latencyMs": "1528"
            },
            "generated_answer": "# Using Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    return sum([i**2 for i in lst if i > 0 and i%2!=0 and \".\" not in str(i)])\n",
            "question": "\ndef double_the_difference(lst):\n    '''\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n    \n    double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n    double_the_difference([-1, -2, 0]) == 0\n    double_the_difference([9, -2]) == 81\n    double_the_difference([0]) == 0  \n   \n    If the input list is empty, return 0.\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1098"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    return [abs(x-y) for x,y in zip(game,guess)]\n",
            "question": "\ndef compare(game,guess):\n    \"\"\"I think we all remember that feeling when the result of some long-awaited\n    event is finally known. The feelings and thoughts you have at that moment are\n    definitely worth noting down and comparing.\n    Your task is to determine if a person correctly guessed the results of a number of matches.\n    You are given two arrays of scores and guesses of equal length, where each index shows a match. \n    Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n    the value is 0, and if not, the value is the absolute difference between the guess and the score.\n    \n    \n    example:\n\n    compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n    compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "39",
                "totalTokens": "224",
                "latencyMs": "1791"
            },
            "generated_answer": "# Use Euclidean algorithm to find greatest common divisor\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n",
            "question": "\ndef Strongest_Extension(class_name, extensions):\n    \"\"\"You will be given the name of a class (a string) and a list of extensions.\n    The extensions are to be used to load additional classes to the class. The\n    strength of the extension is as follows: Let CAP be the number of the uppercase\n    letters in the extension's name, and let SM be the number of lowercase letters \n    in the extension's name, the strength is given by the fraction CAP - SM. \n    You should find the strongest extension and return a string in this \n    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions with the same strength, you should\n    choose the one that comes first in the list.\n    For example, if you are given \"Slices\" as the class and a list of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1578"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n",
            "question": "\ndef cycpattern_check(a , b):\n    \"\"\"You are given 2 words. You need to return True if the second word or any of its rotations is a substring in the first word\n    cycpattern_check(\"abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n    cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\",\"simen\") => True\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1248"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return (even_count, odd_count)\n",
            "question": "\ndef even_odd_count(num):\n    \"\"\"Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n     Example:\n        even_odd_count(-12) ==> (1, 1)\n        even_odd_count(123) ==> (1, 2)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "37",
                "totalTokens": "222",
                "latencyMs": "1752"
            },
            "generated_answer": "# Implementing Euclidean algorithm for GCD\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n",
            "question": "\ndef int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "23",
                "totalTokens": "208",
                "latencyMs": "1577"
            },
            "generated_answer": "while b:\n    a, b = b, a % b\nreturn abs(a)",
            "expected_answer": "    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n",
            "question": "\ndef right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1603"
            },
            "generated_answer": "return ' '.join(str(i) for i in range(n + 1))",
            "expected_answer": "    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n",
            "question": "\ndef find_max(words):\n    \"\"\"Write a function that accepts a list of strings.\n    The list contains different words. Return the word with maximum number\n    of unique characters. If multiple strings have maximum number of unique\n    characters, return the one which comes first in lexicographical order.\n\n    find_max([\"name\", \"of\", \"string\"]) == \"string\"\n    find_max([\"name\", \"enam\", \"game\"]) == \"enam\"\n    find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) == \"\"aaaaaaa\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "185",
                "outputTokens": "34",
                "totalTokens": "219",
                "latencyMs": "1641"
            },
            "generated_answer": "# Using the Euclidean algorithm\n    while b:\n        a, b = b, a % b\n    return abs(a)",
            "expected_answer": "    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n",
            "question": "\ndef eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1176"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n",
            "question": "\ndef do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "187",
                "outputTokens": "22",
                "totalTokens": "209",
                "latencyMs": "1375"
            },
            "generated_answer": "return ' '.join(str(num) for num in range(n + 1))",
            "expected_answer": "    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n",
            "question": "\ndef solve(s):\n    \"\"\"You are given a string s.\n    if s[i] is a letter, reverse its case from lower to upper or vise versa, \n    otherwise keep it as it is.\n    If the string contains no letters, reverse the string.\n    The function should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "20",
                "totalTokens": "193",
                "latencyMs": "1101"
            },
            "generated_answer": "[string[:i+1] for i in range(len(string))]",
            "expected_answer": "    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else None\n",
            "question": "\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n",
            "retrieved_contexts": null
        },
        {
            "metadata": {
                "inputTokens": "173",
                "outputTokens": "21",
                "totalTokens": "194",
                "latencyMs": "1391"
            },
            "generated_answer": "return [string[:i+1] for i in range(len(string))]",
            "expected_answer": "    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n",
            "question": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n",
            "retrieved_contexts": null
        }
    ]
}